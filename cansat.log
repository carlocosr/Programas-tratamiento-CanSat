2025-04-04 01:37:42 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 01:37:42 | INFO     | Cargando datos desde: datos.csv
2025-04-04 01:37:42 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 01:37:45 | INFO     | Gráficos generados exitosamente
2025-04-04 01:37:46 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 01:37:46 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 01:37:46 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 01:37:46 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 01:54:12 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 01:54:12 | INFO     | Cargando datos desde: datos.csv
2025-04-04 01:54:12 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 01:54:12 | INFO     | Gráficos generados exitosamente
2025-04-04 01:54:12 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 01:54:12 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 01:54:12 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 01:54:12 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 01:54:41 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 01:54:41 | INFO     | Cargando datos desde: datos.csv
2025-04-04 01:54:41 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 01:54:41 | INFO     | Gráficos generados exitosamente
2025-04-04 01:54:41 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 01:54:41 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 01:54:41 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 01:54:41 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 02:43:29 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 02:43:29 | INFO     | Cargando datos desde: datos.csv
2025-04-04 02:43:29 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 02:43:33 | INFO     | Gráficos generados exitosamente
2025-04-04 02:43:34 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 02:43:34 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 02:43:34 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 02:43:34 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 02:49:23 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 02:49:23 | INFO     | Cargando datos desde: datos.csv
2025-04-04 02:49:23 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 02:49:23 | INFO     | Gráficos generados exitosamente
2025-04-04 02:49:23 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 02:49:23 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 02:49:24 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 02:49:24 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 02:50:56 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 02:50:56 | INFO     | Cargando datos desde: datos.csv
2025-04-04 02:50:56 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 02:50:56 | INFO     | Gráficos generados exitosamente
2025-04-04 02:50:56 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 02:50:56 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 02:50:56 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 02:50:56 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 02:55:01 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-04 02:55:01 | INFO     | Cargando datos desde: datos.csv
2025-04-04 02:55:01 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 02:55:02 | INFO     | Gráficos generados exitosamente
2025-04-04 02:55:02 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-04 02:55:02 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-04 02:55:02 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-04 02:55:02 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-04 20:59:09 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:09 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:09 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:09 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:44 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:44 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:44 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:44 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:44 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:44 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:56 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:56 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:56 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:56 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-04 20:59:56 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:56 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:56 | INFO     | Gráficos generados exitosamente
2025-04-04 20:59:56 | INFO     | Gráficos generados exitosamente
2025-04-05 00:11:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:11:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:11:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:11:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:14:17 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:14:17 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:14:18 | INFO     | Gráficos generados exitosamente
2025-04-05 00:14:18 | INFO     | Gráficos generados exitosamente
2025-04-05 00:18:52 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:18:52 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:18:52 | INFO     | Gráficos generados exitosamente
2025-04-05 00:18:52 | INFO     | Gráficos generados exitosamente
2025-04-05 00:19:41 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:19:41 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:19:41 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:19:41 | INFO     | Gráficos generados exitosamente
2025-04-05 00:19:41 | INFO     | Gráficos generados exitosamente
2025-04-05 00:19:41 | INFO     | Gráficos generados exitosamente
2025-04-05 00:21:53 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:21:53 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:21:53 | INFO     | Gráficos generados exitosamente
2025-04-05 00:21:53 | INFO     | Gráficos generados exitosamente
2025-04-05 00:21:55 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:21:55 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:21:55 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:21:55 | INFO     | Gráficos generados exitosamente
2025-04-05 00:21:55 | INFO     | Gráficos generados exitosamente
2025-04-05 00:21:55 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:10 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-05 00:22:13 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:13 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:13 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:13 | INFO     | Gráficos generados exitosamente
2025-04-05 00:22:13 | INFO     | Gráficos generados exitosamente
2025-04-06 02:23:45 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:23:45 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:23:45 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:23:48 | ERROR    | Error generando gráficos: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 190, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-06 02:23:48 | CRITICAL | Error no controlado: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 223, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 190, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-06 02:25:35 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:25:35 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:25:35 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:25:35 | ERROR    | Error generando gráficos: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 190, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-06 02:25:35 | CRITICAL | Error no controlado: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 223, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 190, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-06 02:26:58 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:26:58 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:26:58 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:27:06 | INFO     | Gráficos generados exitosamente
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 02:27:07 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 02:27:07 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 02:29:42 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:29:42 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:29:42 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:29:44 | ERROR    | Error generando gráficos: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 192, in generar_graficas_interactivas
    fig5b = px.scatter(df, x='Altitud', y='Temperatura',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2479, in make_figure
    args = build_dataframe(args, constructor)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1727, in build_dataframe
    df_output, wide_id_vars = process_args_into_dataframe(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1328, in process_args_into_dataframe
    raise ValueError(err_msg)
ValueError: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
2025-04-06 02:29:44 | CRITICAL | Error no controlado: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 223, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 192, in generar_graficas_interactivas
    fig5b = px.scatter(df, x='Altitud', y='Temperatura',
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2479, in make_figure
    args = build_dataframe(args, constructor)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1727, in build_dataframe
    df_output, wide_id_vars = process_args_into_dataframe(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1328, in process_args_into_dataframe
    raise ValueError(err_msg)
ValueError: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
2025-04-06 02:31:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:31:34 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:31:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:31:35 | INFO     | Gráficos generados exitosamente
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 02:31:35 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 02:31:35 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 02:32:23 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:32:23 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:32:23 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:32:24 | INFO     | Gráficos generados exitosamente
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 02:32:24 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 02:32:24 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 02:48:21 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 02:48:21 | INFO     | Cargando datos desde: datos.csv
2025-04-06 02:48:21 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 02:48:22 | INFO     | Gráficos generados exitosamente
2025-04-06 02:48:22 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 02:48:23 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 02:48:23 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 02:48:24 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 02:48:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 02:48:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 02:48:26 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 02:48:26 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:11:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:11:34 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:11:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:11:35 | INFO     | Gráficos generados exitosamente
2025-04-06 03:11:36 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:11:36 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:11:37 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:11:37 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:11:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:11:39 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:11:39 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:11:39 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:13:55 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:13:55 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:13:55 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:13:56 | INFO     | Gráficos generados exitosamente
2025-04-06 03:13:57 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:13:57 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:13:58 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:13:59 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:13:59 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:14:00 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:14:01 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:14:01 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:17:04 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:17:04 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:17:04 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:17:05 | INFO     | Gráficos generados exitosamente
2025-04-06 03:17:06 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:17:06 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:17:07 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:17:08 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:17:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:17:09 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:17:10 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:17:10 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:18:01 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:18:01 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:18:01 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:18:02 | INFO     | Gráficos generados exitosamente
2025-04-06 03:18:02 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:18:03 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:18:03 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:18:04 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:18:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:18:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:18:06 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:18:06 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:19:59 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:19:59 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:19:59 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:20:00 | INFO     | Gráficos generados exitosamente
2025-04-06 03:20:01 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:20:02 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:20:02 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:20:03 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:20:03 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:20:04 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:20:05 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:20:05 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:27:27 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:27:27 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:27:27 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:27:28 | INFO     | Gráficos generados exitosamente
2025-04-06 03:27:29 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:27:29 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:27:30 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:27:31 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:27:31 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:27:32 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:27:33 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:27:33 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:36:57 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:36:57 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:36:57 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:36:59 | INFO     | Gráficos generados exitosamente
2025-04-06 03:36:59 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:37:00 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:37:00 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:37:01 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:37:02 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:37:02 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:37:03 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:37:03 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 03:43:43 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:43:43 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:43:43 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:43:44 | INFO     | Gráficos generados exitosamente
2025-04-06 03:43:45 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:43:46 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:43:46 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:43:47 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:43:47 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:43:48 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:43:49 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:43:49 | CRITICAL | Error no controlado: name 'archivo_csv' is not defined
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 466, in main
    datos_gps = leer_datos_csv(archivo_csv)
                               ^^^^^^^^^^^
NameError: name 'archivo_csv' is not defined. Did you mean: 'archivo_kml'?
2025-04-06 03:44:14 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:44:14 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:44:14 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:44:15 | INFO     | Gráficos generados exitosamente
2025-04-06 03:44:16 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:44:16 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:44:17 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:44:17 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:44:18 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:44:18 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:44:19 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:44:19 | CRITICAL | Error no controlado: name 'csv' is not defined
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 466, in main
    datos_gps = leer_datos_csv('datos.csv')
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 427, in leer_datos_csv
    reader = csv.reader(file)
             ^^^
NameError: name 'csv' is not defined. Did you forget to import 'csv'
2025-04-06 03:46:01 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 03:46:01 | INFO     | Cargando datos desde: datos.csv
2025-04-06 03:46:01 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 03:46:02 | INFO     | Gráficos generados exitosamente
2025-04-06 03:46:03 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 03:46:03 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 03:46:04 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 03:46:05 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 03:46:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 03:46:06 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 03:46:06 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 03:46:06 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 10:24:12 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 10:24:12 | INFO     | Cargando datos desde: datos.csv
2025-04-06 10:24:12 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 10:24:23 | INFO     | Gráficos generados exitosamente
2025-04-06 10:24:24 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 10:24:25 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 10:24:26 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 10:24:27 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 10:24:27 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 10:24:28 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 10:24:28 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 10:24:28 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 14:16:10 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 14:16:10 | INFO     | Cargando datos desde: datos.csv
2025-04-06 14:16:10 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 14:16:12 | INFO     | Gráficos generados exitosamente
2025-04-06 14:16:12 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 14:16:13 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 14:16:13 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 14:16:14 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 14:16:15 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 14:16:15 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 14:16:16 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 14:16:16 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 14:18:26 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 14:18:26 | INFO     | Cargando datos desde: datos.csv
2025-04-06 14:18:26 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 14:18:28 | INFO     | Gráficos generados exitosamente
2025-04-06 14:18:28 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 14:18:29 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 14:18:29 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 14:18:30 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 14:18:31 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 14:18:31 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 14:18:32 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 14:18:32 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 14:21:33 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 14:21:33 | INFO     | Cargando datos desde: datos.csv
2025-04-06 14:21:33 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 14:21:34 | INFO     | Gráficos generados exitosamente
2025-04-06 14:21:35 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 14:21:35 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 14:21:36 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 14:21:37 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 14:21:37 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 14:21:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 14:21:38 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 14:21:39 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 15:37:40 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:37:40 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:37:40 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:37:40 | ERROR    | Error generando gráficos: 
    Invalid value of type 'builtins.str' received for the 'color' property of layout.annotation.font
        Received value: '#a40000ff'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 229, in generar_graficas_interactivas
    fig3.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3910, in _perform_update
    BaseFigure._perform_update(plotly_obj[key], val)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3942, in _perform_update
    BaseFigure._perform_update(plotly_element, update_element)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3905, in _perform_update
    BaseFigure._perform_update(plotly_obj[key], val)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3926, in _perform_update
    plotly_obj[key] = val
    ~~~~~~~~~~^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4860, in __setitem__
    self._set_prop(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5204, in _set_prop
    raise err
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5199, in _set_prop
    val = validator.validate_coerce(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 1406, in validate_coerce
    self.raise_invalid_val(v)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 299, in raise_invalid_val
    raise ValueError(
ValueError: 
    Invalid value of type 'builtins.str' received for the 'color' property of layout.annotation.font
        Received value: '#a40000ff'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
2025-04-06 15:37:40 | CRITICAL | Error no controlado: 
    Invalid value of type 'builtins.str' received for the 'color' property of layout.annotation.font
        Received value: '#a40000ff'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 481, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 229, in generar_graficas_interactivas
    fig3.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3910, in _perform_update
    BaseFigure._perform_update(plotly_obj[key], val)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3942, in _perform_update
    BaseFigure._perform_update(plotly_element, update_element)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3905, in _perform_update
    BaseFigure._perform_update(plotly_obj[key], val)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3926, in _perform_update
    plotly_obj[key] = val
    ~~~~~~~~~~^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4860, in __setitem__
    self._set_prop(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5204, in _set_prop
    raise err
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5199, in _set_prop
    val = validator.validate_coerce(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 1406, in validate_coerce
    self.raise_invalid_val(v)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 299, in raise_invalid_val
    raise ValueError(
ValueError: 
    Invalid value of type 'builtins.str' received for the 'color' property of layout.annotation.font
        Received value: '#a40000ff'

    The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen
2025-04-06 15:38:05 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:38:05 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:38:05 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:38:07 | INFO     | Gráficos generados exitosamente
2025-04-06 15:38:07 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 15:38:08 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 15:38:08 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 15:38:09 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 15:38:10 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 15:38:10 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 15:38:11 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 15:38:11 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 15:40:15 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:40:15 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:40:15 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:40:16 | INFO     | Gráficos generados exitosamente
2025-04-06 15:40:17 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 15:40:17 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 15:40:18 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 15:40:18 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 15:40:19 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 15:40:20 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 15:40:20 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 15:40:20 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 15:41:47 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:41:47 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:41:47 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:41:48 | INFO     | Gráficos generados exitosamente
2025-04-06 15:41:49 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 15:41:49 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 15:41:50 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 15:41:51 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 15:41:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 15:41:52 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 15:41:52 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 15:41:52 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 15:48:58 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:48:58 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:48:58 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:48:59 | ERROR    | Error generando gráficos: Invalid property specified for object of type plotly.graph_objs.layout.Annotation: 'title'

Did you mean "name"?

    Valid properties:
        align
            Sets the horizontal alignment of the `text` within the
            box. Has an effect only if `text` spans two or more
            lines (i.e. `text` contains one or more <br> HTML tags)
            or if an explicit width is set to override the text
            width.
        arrowcolor
            Sets the color of the annotation arrow.
        arrowhead
            Sets the end annotation arrow head style.
        arrowside
            Sets the annotation arrow head position.
        arrowsize
            Sets the size of the end annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        arrowwidth
            Sets the width (in px) of annotation arrow line.
        ax
            Sets the x component of the arrow tail about the arrow
            head. If `axref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from right
            to left (left to right). If `axref` is not `pixel` and
            is exactly the same as `xref`, this is an absolute
            value on that axis, like `x`, specified in the same
            coordinates as `xref`.
        axref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a x axis id
            (e.g. "x" or "x2"), the `x` position refers to a x
            coordinate. If set to "paper", the `x` position refers
            to the distance from the left of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis. In order for absolute
            positioning of the arrow to work, "axref" must be
            exactly the same as "xref", otherwise "axref" will
            revert to "pixel" (explained next). For relative
            positioning, "axref" can be set to "pixel", in which
            case the "ax" value is specified in pixels relative to
            "x". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        ay
            Sets the y component of the arrow tail about the arrow
            head. If `ayref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from bottom
            to top (top to bottom). If `ayref` is not `pixel` and
            is exactly the same as `yref`, this is an absolute
            value on that axis, like `y`, specified in the same
            coordinates as `yref`.
        ayref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a y axis id
            (e.g. "y" or "y2"), the `y` position refers to a y
            coordinate. If set to "paper", the `y` position refers
            to the distance from the bottom of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis. In order for absolute
            positioning of the arrow to work, "ayref" must be
            exactly the same as "yref", otherwise "ayref" will
            revert to "pixel" (explained next). For relative
            positioning, "ayref" can be set to "pixel", in which
            case the "ay" value is specified in pixels relative to
            "y". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        bgcolor
            Sets the background color of the annotation.
        bordercolor
            Sets the color of the border enclosing the annotation
            `text`.
        borderpad
            Sets the padding (in px) between the `text` and the
            enclosing border.
        borderwidth
            Sets the width (in px) of the border enclosing the
            annotation `text`.
        captureevents
            Determines whether the annotation text box captures
            mouse move and click events, or allows those events to
            pass through to data points in the plot that may be
            behind the annotation. By default `captureevents` is
            False unless `hovertext` is provided. If you use the
            event `plotly_clickannotation` without `hovertext` you
            must explicitly enable `captureevents`.
        clicktoshow
            Makes this annotation respond to clicks on the plot. If
            you click a data point that exactly matches the `x` and
            `y` values of this annotation, and it is hidden
            (visible: false), it will appear. In "onoff" mode, you
            must click the same point again to make it disappear,
            so if you click multiple points, you can show multiple
            annotations. In "onout" mode, a click anywhere else in
            the plot (on another data point or not) will hide this
            annotation. If you need to show/hide this annotation in
            response to different `x` or `y` values, you can set
            `xclick` and/or `yclick`. This is useful for example to
            label the side of a bar. To label markers though,
            `standoff` is preferred over `xclick` and `yclick`.
        font
            Sets the annotation text font.
        height
            Sets an explicit height for the text box. null
            (default) lets the text set the box height. Taller text
            will be clipped.
        hoverlabel
            :class:`plotly.graph_objects.layout.annotation.Hoverlab
            el` instance or dict with compatible properties
        hovertext
            Sets text to appear when hovering over this annotation.
            If omitted or blank, no hover label will appear.
        name
            When used in a template, named items are created in the
            output figure in addition to any items the figure
            already has in this array. You can modify these items
            in the output figure by making your own item with
            `templateitemname` matching this `name` alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). Has no effect outside of a
            template.
        opacity
            Sets the opacity of the annotation (text + arrow).
        showarrow
            Determines whether or not the annotation is drawn with
            an arrow. If True, `text` is placed near the arrow's
            tail. If False, `text` lines up with the `x` and `y`
            provided.
        standoff
            Sets a distance, in pixels, to move the end arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        startarrowhead
            Sets the start annotation arrow head style.
        startarrowsize
            Sets the size of the start annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        startstandoff
            Sets a distance, in pixels, to move the start arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        templateitemname
            Used to refer to a named item in this array in the
            template. Named items from the template will be created
            even without a matching item in the input figure, but
            you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). If there is no template or no
            matching item, this item will be hidden unless you
            explicitly show it with `visible: true`.
        text
            Sets the text associated with this annotation. Plotly
            uses a subset of HTML tags to do things like newline
            (<br>), bold (<b></b>), italics (<i></i>), hyperlinks
            (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u>
            <span> are also supported.
        textangle
            Sets the angle at which the `text` is drawn with
            respect to the horizontal.
        valign
            Sets the vertical alignment of the `text` within the
            box. Has an effect only if an explicit height is set to
            override the text height.
        visible
            Determines whether or not this annotation is visible.
        width
            Sets an explicit width for the text box. null (default)
            lets the text set the box width. Wider text will be
            clipped. There is no automatic wrapping; use <br> to
            start a new line.
        x
            Sets the annotation's x position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        xanchor
            Sets the text box's horizontal position anchor This
            anchor binds the `x` position to the "left", "center"
            or "right" of the annotation. For example, if `x` is
            set to 1, `xref` to "paper" and `xanchor` to "right"
            then the right-most portion of the annotation lines up
            with the right-most edge of the plotting area. If
            "auto", the anchor is equivalent to "center" for data-
            referenced annotations or if there is an arrow, whereas
            for paper-referenced with no arrow, the anchor picked
            corresponds to the closest side.
        xclick
            Toggle this annotation when clicking a data point whose
            `x` value is `xclick` rather than the annotation's `x`
            value.
        xref
            Sets the annotation's x coordinate axis. If set to a x
            axis id (e.g. "x" or "x2"), the `x` position refers to
            a x coordinate. If set to "paper", the `x` position
            refers to the distance from the left of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis.
        xshift
            Shifts the position of the whole annotation and arrow
            to the right (positive) or left (negative) by this many
            pixels.
        y
            Sets the annotation's y position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        yanchor
            Sets the text box's vertical position anchor This
            anchor binds the `y` position to the "top", "middle" or
            "bottom" of the annotation. For example, if `y` is set
            to 1, `yref` to "paper" and `yanchor` to "top" then the
            top-most portion of the annotation lines up with the
            top-most edge of the plotting area. If "auto", the
            anchor is equivalent to "middle" for data-referenced
            annotations or if there is an arrow, whereas for paper-
            referenced with no arrow, the anchor picked corresponds
            to the closest side.
        yclick
            Toggle this annotation when clicking a data point whose
            `y` value is `yclick` rather than the annotation's `y`
            value.
        yref
            Sets the annotation's y coordinate axis. If set to a y
            axis id (e.g. "y" or "y2"), the `y` position refers to
            a y coordinate. If set to "paper", the `y` position
            refers to the distance from the bottom of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis.
        yshift
            Shifts the position of the whole annotation and arrow
            up (positive) or down (negative) by this many pixels.
        
Did you mean "name"?

Bad property path:
title_text
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 268, in generar_graficas_interactivas
    fig4.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3923, in _perform_update
    plotly_obj[key] = val
    ~~~~~~~~~~^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5898, in __setitem__
    super(BaseLayoutHierarchyType, self).__setitem__(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4856, in __setitem__
    self._set_array_prop(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5337, in _set_array_prop
    val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 2596, in validate_coerce
    res.append(self.data_class(v_el, skip_invalid=skip_invalid))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\layout\_annotation.py", line 2108, in __init__
    self._process_kwargs(**dict(arg, **kwargs))
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4378, in _process_kwargs
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.layout.Annotation: 'title'

Did you mean "name"?

    Valid properties:
        align
            Sets the horizontal alignment of the `text` within the
            box. Has an effect only if `text` spans two or more
            lines (i.e. `text` contains one or more <br> HTML tags)
            or if an explicit width is set to override the text
            width.
        arrowcolor
            Sets the color of the annotation arrow.
        arrowhead
            Sets the end annotation arrow head style.
        arrowside
            Sets the annotation arrow head position.
        arrowsize
            Sets the size of the end annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        arrowwidth
            Sets the width (in px) of annotation arrow line.
        ax
            Sets the x component of the arrow tail about the arrow
            head. If `axref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from right
            to left (left to right). If `axref` is not `pixel` and
            is exactly the same as `xref`, this is an absolute
            value on that axis, like `x`, specified in the same
            coordinates as `xref`.
        axref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a x axis id
            (e.g. "x" or "x2"), the `x` position refers to a x
            coordinate. If set to "paper", the `x` position refers
            to the distance from the left of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis. In order for absolute
            positioning of the arrow to work, "axref" must be
            exactly the same as "xref", otherwise "axref" will
            revert to "pixel" (explained next). For relative
            positioning, "axref" can be set to "pixel", in which
            case the "ax" value is specified in pixels relative to
            "x". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        ay
            Sets the y component of the arrow tail about the arrow
            head. If `ayref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from bottom
            to top (top to bottom). If `ayref` is not `pixel` and
            is exactly the same as `yref`, this is an absolute
            value on that axis, like `y`, specified in the same
            coordinates as `yref`.
        ayref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a y axis id
            (e.g. "y" or "y2"), the `y` position refers to a y
            coordinate. If set to "paper", the `y` position refers
            to the distance from the bottom of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis. In order for absolute
            positioning of the arrow to work, "ayref" must be
            exactly the same as "yref", otherwise "ayref" will
            revert to "pixel" (explained next). For relative
            positioning, "ayref" can be set to "pixel", in which
            case the "ay" value is specified in pixels relative to
            "y". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        bgcolor
            Sets the background color of the annotation.
        bordercolor
            Sets the color of the border enclosing the annotation
            `text`.
        borderpad
            Sets the padding (in px) between the `text` and the
            enclosing border.
        borderwidth
            Sets the width (in px) of the border enclosing the
            annotation `text`.
        captureevents
            Determines whether the annotation text box captures
            mouse move and click events, or allows those events to
            pass through to data points in the plot that may be
            behind the annotation. By default `captureevents` is
            False unless `hovertext` is provided. If you use the
            event `plotly_clickannotation` without `hovertext` you
            must explicitly enable `captureevents`.
        clicktoshow
            Makes this annotation respond to clicks on the plot. If
            you click a data point that exactly matches the `x` and
            `y` values of this annotation, and it is hidden
            (visible: false), it will appear. In "onoff" mode, you
            must click the same point again to make it disappear,
            so if you click multiple points, you can show multiple
            annotations. In "onout" mode, a click anywhere else in
            the plot (on another data point or not) will hide this
            annotation. If you need to show/hide this annotation in
            response to different `x` or `y` values, you can set
            `xclick` and/or `yclick`. This is useful for example to
            label the side of a bar. To label markers though,
            `standoff` is preferred over `xclick` and `yclick`.
        font
            Sets the annotation text font.
        height
            Sets an explicit height for the text box. null
            (default) lets the text set the box height. Taller text
            will be clipped.
        hoverlabel
            :class:`plotly.graph_objects.layout.annotation.Hoverlab
            el` instance or dict with compatible properties
        hovertext
            Sets text to appear when hovering over this annotation.
            If omitted or blank, no hover label will appear.
        name
            When used in a template, named items are created in the
            output figure in addition to any items the figure
            already has in this array. You can modify these items
            in the output figure by making your own item with
            `templateitemname` matching this `name` alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). Has no effect outside of a
            template.
        opacity
            Sets the opacity of the annotation (text + arrow).
        showarrow
            Determines whether or not the annotation is drawn with
            an arrow. If True, `text` is placed near the arrow's
            tail. If False, `text` lines up with the `x` and `y`
            provided.
        standoff
            Sets a distance, in pixels, to move the end arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        startarrowhead
            Sets the start annotation arrow head style.
        startarrowsize
            Sets the size of the start annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        startstandoff
            Sets a distance, in pixels, to move the start arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        templateitemname
            Used to refer to a named item in this array in the
            template. Named items from the template will be created
            even without a matching item in the input figure, but
            you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). If there is no template or no
            matching item, this item will be hidden unless you
            explicitly show it with `visible: true`.
        text
            Sets the text associated with this annotation. Plotly
            uses a subset of HTML tags to do things like newline
            (<br>), bold (<b></b>), italics (<i></i>), hyperlinks
            (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u>
            <span> are also supported.
        textangle
            Sets the angle at which the `text` is drawn with
            respect to the horizontal.
        valign
            Sets the vertical alignment of the `text` within the
            box. Has an effect only if an explicit height is set to
            override the text height.
        visible
            Determines whether or not this annotation is visible.
        width
            Sets an explicit width for the text box. null (default)
            lets the text set the box width. Wider text will be
            clipped. There is no automatic wrapping; use <br> to
            start a new line.
        x
            Sets the annotation's x position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        xanchor
            Sets the text box's horizontal position anchor This
            anchor binds the `x` position to the "left", "center"
            or "right" of the annotation. For example, if `x` is
            set to 1, `xref` to "paper" and `xanchor` to "right"
            then the right-most portion of the annotation lines up
            with the right-most edge of the plotting area. If
            "auto", the anchor is equivalent to "center" for data-
            referenced annotations or if there is an arrow, whereas
            for paper-referenced with no arrow, the anchor picked
            corresponds to the closest side.
        xclick
            Toggle this annotation when clicking a data point whose
            `x` value is `xclick` rather than the annotation's `x`
            value.
        xref
            Sets the annotation's x coordinate axis. If set to a x
            axis id (e.g. "x" or "x2"), the `x` position refers to
            a x coordinate. If set to "paper", the `x` position
            refers to the distance from the left of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis.
        xshift
            Shifts the position of the whole annotation and arrow
            to the right (positive) or left (negative) by this many
            pixels.
        y
            Sets the annotation's y position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        yanchor
            Sets the text box's vertical position anchor This
            anchor binds the `y` position to the "top", "middle" or
            "bottom" of the annotation. For example, if `y` is set
            to 1, `yref` to "paper" and `yanchor` to "top" then the
            top-most portion of the annotation lines up with the
            top-most edge of the plotting area. If "auto", the
            anchor is equivalent to "middle" for data-referenced
            annotations or if there is an arrow, whereas for paper-
            referenced with no arrow, the anchor picked corresponds
            to the closest side.
        yclick
            Toggle this annotation when clicking a data point whose
            `y` value is `yclick` rather than the annotation's `y`
            value.
        yref
            Sets the annotation's y coordinate axis. If set to a y
            axis id (e.g. "y" or "y2"), the `y` position refers to
            a y coordinate. If set to "paper", the `y` position
            refers to the distance from the bottom of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis.
        yshift
            Shifts the position of the whole annotation and arrow
            up (positive) or down (negative) by this many pixels.
        
Did you mean "name"?

Bad property path:
title_text
^^^^^
2025-04-06 15:48:59 | CRITICAL | Error no controlado: Invalid property specified for object of type plotly.graph_objs.layout.Annotation: 'title'

Did you mean "name"?

    Valid properties:
        align
            Sets the horizontal alignment of the `text` within the
            box. Has an effect only if `text` spans two or more
            lines (i.e. `text` contains one or more <br> HTML tags)
            or if an explicit width is set to override the text
            width.
        arrowcolor
            Sets the color of the annotation arrow.
        arrowhead
            Sets the end annotation arrow head style.
        arrowside
            Sets the annotation arrow head position.
        arrowsize
            Sets the size of the end annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        arrowwidth
            Sets the width (in px) of annotation arrow line.
        ax
            Sets the x component of the arrow tail about the arrow
            head. If `axref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from right
            to left (left to right). If `axref` is not `pixel` and
            is exactly the same as `xref`, this is an absolute
            value on that axis, like `x`, specified in the same
            coordinates as `xref`.
        axref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a x axis id
            (e.g. "x" or "x2"), the `x` position refers to a x
            coordinate. If set to "paper", the `x` position refers
            to the distance from the left of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis. In order for absolute
            positioning of the arrow to work, "axref" must be
            exactly the same as "xref", otherwise "axref" will
            revert to "pixel" (explained next). For relative
            positioning, "axref" can be set to "pixel", in which
            case the "ax" value is specified in pixels relative to
            "x". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        ay
            Sets the y component of the arrow tail about the arrow
            head. If `ayref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from bottom
            to top (top to bottom). If `ayref` is not `pixel` and
            is exactly the same as `yref`, this is an absolute
            value on that axis, like `y`, specified in the same
            coordinates as `yref`.
        ayref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a y axis id
            (e.g. "y" or "y2"), the `y` position refers to a y
            coordinate. If set to "paper", the `y` position refers
            to the distance from the bottom of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis. In order for absolute
            positioning of the arrow to work, "ayref" must be
            exactly the same as "yref", otherwise "ayref" will
            revert to "pixel" (explained next). For relative
            positioning, "ayref" can be set to "pixel", in which
            case the "ay" value is specified in pixels relative to
            "y". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        bgcolor
            Sets the background color of the annotation.
        bordercolor
            Sets the color of the border enclosing the annotation
            `text`.
        borderpad
            Sets the padding (in px) between the `text` and the
            enclosing border.
        borderwidth
            Sets the width (in px) of the border enclosing the
            annotation `text`.
        captureevents
            Determines whether the annotation text box captures
            mouse move and click events, or allows those events to
            pass through to data points in the plot that may be
            behind the annotation. By default `captureevents` is
            False unless `hovertext` is provided. If you use the
            event `plotly_clickannotation` without `hovertext` you
            must explicitly enable `captureevents`.
        clicktoshow
            Makes this annotation respond to clicks on the plot. If
            you click a data point that exactly matches the `x` and
            `y` values of this annotation, and it is hidden
            (visible: false), it will appear. In "onoff" mode, you
            must click the same point again to make it disappear,
            so if you click multiple points, you can show multiple
            annotations. In "onout" mode, a click anywhere else in
            the plot (on another data point or not) will hide this
            annotation. If you need to show/hide this annotation in
            response to different `x` or `y` values, you can set
            `xclick` and/or `yclick`. This is useful for example to
            label the side of a bar. To label markers though,
            `standoff` is preferred over `xclick` and `yclick`.
        font
            Sets the annotation text font.
        height
            Sets an explicit height for the text box. null
            (default) lets the text set the box height. Taller text
            will be clipped.
        hoverlabel
            :class:`plotly.graph_objects.layout.annotation.Hoverlab
            el` instance or dict with compatible properties
        hovertext
            Sets text to appear when hovering over this annotation.
            If omitted or blank, no hover label will appear.
        name
            When used in a template, named items are created in the
            output figure in addition to any items the figure
            already has in this array. You can modify these items
            in the output figure by making your own item with
            `templateitemname` matching this `name` alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). Has no effect outside of a
            template.
        opacity
            Sets the opacity of the annotation (text + arrow).
        showarrow
            Determines whether or not the annotation is drawn with
            an arrow. If True, `text` is placed near the arrow's
            tail. If False, `text` lines up with the `x` and `y`
            provided.
        standoff
            Sets a distance, in pixels, to move the end arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        startarrowhead
            Sets the start annotation arrow head style.
        startarrowsize
            Sets the size of the start annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        startstandoff
            Sets a distance, in pixels, to move the start arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        templateitemname
            Used to refer to a named item in this array in the
            template. Named items from the template will be created
            even without a matching item in the input figure, but
            you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). If there is no template or no
            matching item, this item will be hidden unless you
            explicitly show it with `visible: true`.
        text
            Sets the text associated with this annotation. Plotly
            uses a subset of HTML tags to do things like newline
            (<br>), bold (<b></b>), italics (<i></i>), hyperlinks
            (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u>
            <span> are also supported.
        textangle
            Sets the angle at which the `text` is drawn with
            respect to the horizontal.
        valign
            Sets the vertical alignment of the `text` within the
            box. Has an effect only if an explicit height is set to
            override the text height.
        visible
            Determines whether or not this annotation is visible.
        width
            Sets an explicit width for the text box. null (default)
            lets the text set the box width. Wider text will be
            clipped. There is no automatic wrapping; use <br> to
            start a new line.
        x
            Sets the annotation's x position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        xanchor
            Sets the text box's horizontal position anchor This
            anchor binds the `x` position to the "left", "center"
            or "right" of the annotation. For example, if `x` is
            set to 1, `xref` to "paper" and `xanchor` to "right"
            then the right-most portion of the annotation lines up
            with the right-most edge of the plotting area. If
            "auto", the anchor is equivalent to "center" for data-
            referenced annotations or if there is an arrow, whereas
            for paper-referenced with no arrow, the anchor picked
            corresponds to the closest side.
        xclick
            Toggle this annotation when clicking a data point whose
            `x` value is `xclick` rather than the annotation's `x`
            value.
        xref
            Sets the annotation's x coordinate axis. If set to a x
            axis id (e.g. "x" or "x2"), the `x` position refers to
            a x coordinate. If set to "paper", the `x` position
            refers to the distance from the left of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis.
        xshift
            Shifts the position of the whole annotation and arrow
            to the right (positive) or left (negative) by this many
            pixels.
        y
            Sets the annotation's y position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        yanchor
            Sets the text box's vertical position anchor This
            anchor binds the `y` position to the "top", "middle" or
            "bottom" of the annotation. For example, if `y` is set
            to 1, `yref` to "paper" and `yanchor` to "top" then the
            top-most portion of the annotation lines up with the
            top-most edge of the plotting area. If "auto", the
            anchor is equivalent to "middle" for data-referenced
            annotations or if there is an arrow, whereas for paper-
            referenced with no arrow, the anchor picked corresponds
            to the closest side.
        yclick
            Toggle this annotation when clicking a data point whose
            `y` value is `yclick` rather than the annotation's `y`
            value.
        yref
            Sets the annotation's y coordinate axis. If set to a y
            axis id (e.g. "y" or "y2"), the `y` position refers to
            a y coordinate. If set to "paper", the `y` position
            refers to the distance from the bottom of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis.
        yshift
            Shifts the position of the whole annotation and arrow
            up (positive) or down (negative) by this many pixels.
        
Did you mean "name"?

Bad property path:
title_text
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 484, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 268, in generar_graficas_interactivas
    fig4.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3923, in _perform_update
    plotly_obj[key] = val
    ~~~~~~~~~~^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5898, in __setitem__
    super(BaseLayoutHierarchyType, self).__setitem__(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4856, in __setitem__
    self._set_array_prop(prop, value)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5337, in _set_array_prop
    val = validator.validate_coerce(val, skip_invalid=self._skip_invalid)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 2596, in validate_coerce
    res.append(self.data_class(v_el, skip_invalid=skip_invalid))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\layout\_annotation.py", line 2108, in __init__
    self._process_kwargs(**dict(arg, **kwargs))
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 4378, in _process_kwargs
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.layout.Annotation: 'title'

Did you mean "name"?

    Valid properties:
        align
            Sets the horizontal alignment of the `text` within the
            box. Has an effect only if `text` spans two or more
            lines (i.e. `text` contains one or more <br> HTML tags)
            or if an explicit width is set to override the text
            width.
        arrowcolor
            Sets the color of the annotation arrow.
        arrowhead
            Sets the end annotation arrow head style.
        arrowside
            Sets the annotation arrow head position.
        arrowsize
            Sets the size of the end annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        arrowwidth
            Sets the width (in px) of annotation arrow line.
        ax
            Sets the x component of the arrow tail about the arrow
            head. If `axref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from right
            to left (left to right). If `axref` is not `pixel` and
            is exactly the same as `xref`, this is an absolute
            value on that axis, like `x`, specified in the same
            coordinates as `xref`.
        axref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a x axis id
            (e.g. "x" or "x2"), the `x` position refers to a x
            coordinate. If set to "paper", the `x` position refers
            to the distance from the left of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis. In order for absolute
            positioning of the arrow to work, "axref" must be
            exactly the same as "xref", otherwise "axref" will
            revert to "pixel" (explained next). For relative
            positioning, "axref" can be set to "pixel", in which
            case the "ax" value is specified in pixels relative to
            "x". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        ay
            Sets the y component of the arrow tail about the arrow
            head. If `ayref` is `pixel`, a positive (negative)
            component corresponds to an arrow pointing from bottom
            to top (top to bottom). If `ayref` is not `pixel` and
            is exactly the same as `yref`, this is an absolute
            value on that axis, like `y`, specified in the same
            coordinates as `yref`.
        ayref
            Indicates in what coordinates the tail of the
            annotation (ax,ay) is specified. If set to a y axis id
            (e.g. "y" or "y2"), the `y` position refers to a y
            coordinate. If set to "paper", the `y` position refers
            to the distance from the bottom of the plotting area in
            normalized coordinates where 0 (1) corresponds to the
            bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis. In order for absolute
            positioning of the arrow to work, "ayref" must be
            exactly the same as "yref", otherwise "ayref" will
            revert to "pixel" (explained next). For relative
            positioning, "ayref" can be set to "pixel", in which
            case the "ay" value is specified in pixels relative to
            "y". Absolute positioning is useful for trendline
            annotations which should continue to indicate the
            correct trend when zoomed. Relative positioning is
            useful for specifying the text offset for an annotated
            point.
        bgcolor
            Sets the background color of the annotation.
        bordercolor
            Sets the color of the border enclosing the annotation
            `text`.
        borderpad
            Sets the padding (in px) between the `text` and the
            enclosing border.
        borderwidth
            Sets the width (in px) of the border enclosing the
            annotation `text`.
        captureevents
            Determines whether the annotation text box captures
            mouse move and click events, or allows those events to
            pass through to data points in the plot that may be
            behind the annotation. By default `captureevents` is
            False unless `hovertext` is provided. If you use the
            event `plotly_clickannotation` without `hovertext` you
            must explicitly enable `captureevents`.
        clicktoshow
            Makes this annotation respond to clicks on the plot. If
            you click a data point that exactly matches the `x` and
            `y` values of this annotation, and it is hidden
            (visible: false), it will appear. In "onoff" mode, you
            must click the same point again to make it disappear,
            so if you click multiple points, you can show multiple
            annotations. In "onout" mode, a click anywhere else in
            the plot (on another data point or not) will hide this
            annotation. If you need to show/hide this annotation in
            response to different `x` or `y` values, you can set
            `xclick` and/or `yclick`. This is useful for example to
            label the side of a bar. To label markers though,
            `standoff` is preferred over `xclick` and `yclick`.
        font
            Sets the annotation text font.
        height
            Sets an explicit height for the text box. null
            (default) lets the text set the box height. Taller text
            will be clipped.
        hoverlabel
            :class:`plotly.graph_objects.layout.annotation.Hoverlab
            el` instance or dict with compatible properties
        hovertext
            Sets text to appear when hovering over this annotation.
            If omitted or blank, no hover label will appear.
        name
            When used in a template, named items are created in the
            output figure in addition to any items the figure
            already has in this array. You can modify these items
            in the output figure by making your own item with
            `templateitemname` matching this `name` alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). Has no effect outside of a
            template.
        opacity
            Sets the opacity of the annotation (text + arrow).
        showarrow
            Determines whether or not the annotation is drawn with
            an arrow. If True, `text` is placed near the arrow's
            tail. If False, `text` lines up with the `x` and `y`
            provided.
        standoff
            Sets a distance, in pixels, to move the end arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        startarrowhead
            Sets the start annotation arrow head style.
        startarrowsize
            Sets the size of the start annotation arrow head,
            relative to `arrowwidth`. A value of 1 (default) gives
            a head about 3x as wide as the line.
        startstandoff
            Sets a distance, in pixels, to move the start arrowhead
            away from the position it is pointing at, for example
            to point at the edge of a marker independent of zoom.
            Note that this shortens the arrow from the `ax` / `ay`
            vector, in contrast to `xshift` / `yshift` which moves
            everything by this amount.
        templateitemname
            Used to refer to a named item in this array in the
            template. Named items from the template will be created
            even without a matching item in the input figure, but
            you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your
            modifications (including `visible: false` or `enabled:
            false` to hide it). If there is no template or no
            matching item, this item will be hidden unless you
            explicitly show it with `visible: true`.
        text
            Sets the text associated with this annotation. Plotly
            uses a subset of HTML tags to do things like newline
            (<br>), bold (<b></b>), italics (<i></i>), hyperlinks
            (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u>
            <span> are also supported.
        textangle
            Sets the angle at which the `text` is drawn with
            respect to the horizontal.
        valign
            Sets the vertical alignment of the `text` within the
            box. Has an effect only if an explicit height is set to
            override the text height.
        visible
            Determines whether or not this annotation is visible.
        width
            Sets an explicit width for the text box. null (default)
            lets the text set the box width. Wider text will be
            clipped. There is no automatic wrapping; use <br> to
            start a new line.
        x
            Sets the annotation's x position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        xanchor
            Sets the text box's horizontal position anchor This
            anchor binds the `x` position to the "left", "center"
            or "right" of the annotation. For example, if `x` is
            set to 1, `xref` to "paper" and `xanchor` to "right"
            then the right-most portion of the annotation lines up
            with the right-most edge of the plotting area. If
            "auto", the anchor is equivalent to "center" for data-
            referenced annotations or if there is an arrow, whereas
            for paper-referenced with no arrow, the anchor picked
            corresponds to the closest side.
        xclick
            Toggle this annotation when clicking a data point whose
            `x` value is `xclick` rather than the annotation's `x`
            value.
        xref
            Sets the annotation's x coordinate axis. If set to a x
            axis id (e.g. "x" or "x2"), the `x` position refers to
            a x coordinate. If set to "paper", the `x` position
            refers to the distance from the left of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the left (right). If set to a x axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the left of the
            domain of that axis: e.g., *x2 domain* refers to the
            domain of the second x  axis and a x position of 0.5
            refers to the point between the left and the right of
            the domain of the second x axis.
        xshift
            Shifts the position of the whole annotation and arrow
            to the right (positive) or left (negative) by this many
            pixels.
        y
            Sets the annotation's y position. If the axis `type` is
            "log", then you must take the log of your desired
            range. If the axis `type` is "date", it should be date
            strings, like date data, though Date objects and unix
            milliseconds will be accepted and converted to strings.
            If the axis `type` is "category", it should be numbers,
            using the scale where each category is assigned a
            serial number from zero in the order it appears.
        yanchor
            Sets the text box's vertical position anchor This
            anchor binds the `y` position to the "top", "middle" or
            "bottom" of the annotation. For example, if `y` is set
            to 1, `yref` to "paper" and `yanchor` to "top" then the
            top-most portion of the annotation lines up with the
            top-most edge of the plotting area. If "auto", the
            anchor is equivalent to "middle" for data-referenced
            annotations or if there is an arrow, whereas for paper-
            referenced with no arrow, the anchor picked corresponds
            to the closest side.
        yclick
            Toggle this annotation when clicking a data point whose
            `y` value is `yclick` rather than the annotation's `y`
            value.
        yref
            Sets the annotation's y coordinate axis. If set to a y
            axis id (e.g. "y" or "y2"), the `y` position refers to
            a y coordinate. If set to "paper", the `y` position
            refers to the distance from the bottom of the plotting
            area in normalized coordinates where 0 (1) corresponds
            to the bottom (top). If set to a y axis ID followed by
            "domain" (separated by a space), the position behaves
            like for "paper", but refers to the distance in
            fractions of the domain length from the bottom of the
            domain of that axis: e.g., *y2 domain* refers to the
            domain of the second y  axis and a y position of 0.5
            refers to the point between the bottom and the top of
            the domain of the second y axis.
        yshift
            Shifts the position of the whole annotation and arrow
            up (positive) or down (negative) by this many pixels.
        
Did you mean "name"?

Bad property path:
title_text
^^^^^
2025-04-06 15:50:44 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 15:50:44 | INFO     | Cargando datos desde: datos.csv
2025-04-06 15:50:44 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 15:50:46 | INFO     | Gráficos generados exitosamente
2025-04-06 15:50:46 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 15:50:47 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 15:50:47 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 15:50:48 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 15:50:49 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 15:50:49 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 15:50:50 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 15:50:50 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:01:31 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:01:31 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:01:31 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:01:33 | INFO     | Gráficos generados exitosamente
2025-04-06 16:01:33 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:01:34 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:01:34 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:01:35 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:01:36 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:01:36 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:01:37 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:01:37 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:02:43 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:02:43 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:02:43 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:02:44 | INFO     | Gráficos generados exitosamente
2025-04-06 16:02:45 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:02:45 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:02:46 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:02:46 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:02:47 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:02:48 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:02:48 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:02:48 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:05:37 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:05:37 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:05:37 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:05:38 | INFO     | Gráficos generados exitosamente
2025-04-06 16:05:39 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:05:40 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:05:40 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:05:41 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:05:41 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:05:42 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:05:43 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:05:43 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:06:33 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:06:33 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:06:33 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:06:34 | INFO     | Gráficos generados exitosamente
2025-04-06 16:06:34 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:06:35 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:06:36 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:06:36 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:06:37 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:06:37 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:06:38 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:06:38 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:08:21 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:08:21 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:08:21 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:08:22 | INFO     | Gráficos generados exitosamente
2025-04-06 16:08:23 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:08:24 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:08:24 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:08:25 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:08:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:08:26 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:08:27 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:08:27 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:09:59 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:09:59 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:09:59 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:10:00 | INFO     | Gráficos generados exitosamente
2025-04-06 16:10:01 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:10:01 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:10:02 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:10:03 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:10:03 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:10:04 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:10:04 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:10:04 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:30:50 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:30:50 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:30:50 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:30:52 | INFO     | Gráficos generados exitosamente
2025-04-06 16:30:52 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:30:53 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:30:53 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:30:54 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:30:55 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:30:55 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:30:56 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:30:56 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:36:07 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:36:07 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:36:07 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:36:08 | INFO     | Gráficos generados exitosamente
2025-04-06 16:36:09 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:36:09 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:36:10 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:36:11 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:36:11 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:36:12 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:36:12 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:36:12 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:36:53 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:36:53 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:36:54 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:36:55 | INFO     | Gráficos generados exitosamente
2025-04-06 16:36:55 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:36:56 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:36:56 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:36:57 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:36:58 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:36:58 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:36:59 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:36:59 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:41:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:41:34 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:41:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:41:36 | INFO     | Gráficos generados exitosamente
2025-04-06 16:42:52 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:42:52 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:42:52 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:42:53 | INFO     | Gráficos generados exitosamente
2025-04-06 16:42:54 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 16:42:54 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 16:42:55 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 16:42:56 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 16:42:56 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 16:42:57 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 16:42:57 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 16:42:57 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 16:43:14 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 16:43:14 | INFO     | Cargando datos desde: datos.csv
2025-04-06 16:43:14 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 16:43:16 | INFO     | Gráficos generados exitosamente
2025-04-06 17:13:44 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:13:44 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:13:44 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:13:46 | INFO     | Gráficos generados exitosamente
2025-04-06 17:14:31 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:14:49 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:17:50 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:17:50 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:17:50 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:17:51 | INFO     | Gráficos generados exitosamente
2025-04-06 17:17:52 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:17:52 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:17:53 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:17:53 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:17:54 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:17:55 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:17:55 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:17:55 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:18:32 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:18:32 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:18:32 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:18:34 | INFO     | Gráficos generados exitosamente
2025-04-06 17:18:34 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:18:35 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:18:35 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:18:36 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:18:36 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:18:37 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:18:38 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:18:38 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:19:59 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:19:59 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:19:59 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:20:00 | INFO     | Gráficos generados exitosamente
2025-04-06 17:20:00 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:20:01 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:20:02 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:20:02 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:20:03 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:20:03 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:20:04 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:20:04 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:21:02 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:21:02 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:21:02 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:21:03 | INFO     | Gráficos generados exitosamente
2025-04-06 17:21:04 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:21:05 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:21:05 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:21:06 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:21:06 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:21:07 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:21:08 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:21:08 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:21:29 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:21:29 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:21:29 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:21:30 | INFO     | Gráficos generados exitosamente
2025-04-06 17:21:30 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:21:31 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:21:32 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:21:32 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:21:33 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:21:33 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:21:34 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:21:34 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:32:22 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:32:22 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:32:22 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:32:24 | INFO     | Gráficos generados exitosamente
2025-04-06 17:32:24 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:32:25 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:32:25 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:32:26 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:32:27 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:32:27 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:32:28 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:32:28 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:34:04 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:34:04 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:34:04 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:34:05 | INFO     | Gráficos generados exitosamente
2025-04-06 17:34:06 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:34:06 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:34:07 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:34:08 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:34:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:34:09 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:34:09 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:34:09 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:41:11 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:41:11 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:41:11 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:41:13 | INFO     | Gráficos generados exitosamente
2025-04-06 17:41:13 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:41:14 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:41:14 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:41:15 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:41:16 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:41:16 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:41:17 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:41:17 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:44:03 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:44:03 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:44:03 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:44:05 | INFO     | Gráficos generados exitosamente
2025-04-06 17:44:05 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:44:06 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:44:06 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:44:07 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:44:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:44:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:44:09 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:44:09 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:46:21 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:46:21 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:46:21 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:46:22 | INFO     | Gráficos generados exitosamente
2025-04-06 17:46:22 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:46:23 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:46:24 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:46:24 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:46:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:46:26 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:46:26 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:46:26 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:50:41 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:50:41 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:50:41 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:50:42 | INFO     | Gráficos generados exitosamente
2025-04-06 17:50:42 | CRITICAL | Error no controlado: cannot access local variable 'contenido' where it is not associated with a value
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 455, in main
    insertar_encabezado_logo(
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 259, in insertar_encabezado_logo
    contenido_modificado = contenido.replace("<head>", f"<head>\n{favicon_link}")
                           ^^^^^^^^^
UnboundLocalError: cannot access local variable 'contenido' where it is not associated with a value
2025-04-06 17:53:47 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:53:47 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:53:47 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:53:50 | INFO     | Gráficos generados exitosamente
2025-04-06 17:54:42 | CRITICAL | Error no controlado: cannot access local variable 'contenido' where it is not associated with a value
Traceback (most recent call last):
  File "C:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 455, in main
    insertar_encabezado_logo(
  File "C:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 259, in insertar_encabezado_logo
    contenido_modificado = contenido.replace("<head>", f"<head>\n{favicon_link}")
                           ^^^^^^^^^
UnboundLocalError: cannot access local variable 'contenido' where it is not associated with a value
2025-04-06 17:55:27 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:55:27 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:55:27 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:55:28 | INFO     | Gráficos generados exitosamente
2025-04-06 17:55:29 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:55:29 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:55:30 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:55:30 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:55:31 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:55:32 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:55:32 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:55:32 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:56:49 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:56:49 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:56:49 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:56:50 | INFO     | Gráficos generados exitosamente
2025-04-06 17:56:51 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:56:51 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:56:52 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:56:52 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:56:53 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:56:54 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:56:54 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:56:54 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:58:12 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:58:12 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:58:12 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:58:13 | INFO     | Gráficos generados exitosamente
2025-04-06 17:58:13 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:58:14 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:58:14 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:58:15 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:58:16 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:58:16 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:58:17 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:58:17 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 17:59:30 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 17:59:30 | INFO     | Cargando datos desde: datos.csv
2025-04-06 17:59:30 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 17:59:31 | INFO     | Gráficos generados exitosamente
2025-04-06 17:59:32 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 17:59:32 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 17:59:33 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 17:59:33 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 17:59:34 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 17:59:35 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 17:59:35 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 17:59:35 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 18:03:07 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 18:03:07 | INFO     | Cargando datos desde: datos.csv
2025-04-06 18:03:07 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 18:03:09 | INFO     | Gráficos generados exitosamente
2025-04-06 18:03:09 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 18:03:10 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 18:03:10 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 18:03:11 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 18:03:12 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 18:03:12 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 18:03:13 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 18:03:13 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 23:23:36 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:23:36 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:23:36 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:23:39 | ERROR    | Error generando gráficos: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 235, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitud', y='Pressure', trendline='ols', title="Altitud vs Presión")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2479, in make_figure
    args = build_dataframe(args, constructor)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1727, in build_dataframe
    df_output, wide_id_vars = process_args_into_dataframe(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1328, in process_args_into_dataframe
    raise ValueError(err_msg)
ValueError: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
2025-04-06 23:23:39 | CRITICAL | Error no controlado: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 440, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 235, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitud', y='Pressure', trendline='ols', title="Altitud vs Presión")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2479, in make_figure
    args = build_dataframe(args, constructor)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1727, in build_dataframe
    df_output, wide_id_vars = process_args_into_dataframe(
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 1328, in process_args_into_dataframe
    raise ValueError(err_msg)
ValueError: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['Tag', 'Index', 'Temperature', 'Pressure', 'Altitude', 'AccX', 'AccY', 'AccZ', 'GyroX', 'GyroY', 'GyroZ', 'GPS_Lat', 'GPS_Lon', 'Date', 'Time'] but received: Altitud
2025-04-06 23:34:17 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:34:17 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:34:17 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:34:26 | INFO     | Gráficos generados exitosamente
2025-04-06 23:34:27 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 23:34:28 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 23:34:29 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 23:34:29 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 23:34:30 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 23:34:30 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 23:34:31 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 23:34:31 | INFO     | Gráfico guardado: graficos/temp_vs_tiempo.html
2025-04-06 23:34:32 | INFO     | Gráfico guardado: graficos/presion_vs_tiempo.html
2025-04-06 23:34:33 | INFO     | Gráfico guardado: graficos/altitud_vs_tiempo.html
2025-04-06 23:34:33 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 23:54:55 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:54:55 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:54:55 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:54:57 | INFO     | Gráficos generados exitosamente
2025-04-06 23:54:57 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 23:54:58 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 23:54:59 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 23:54:59 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 23:55:00 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 23:55:00 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 23:55:01 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 23:55:01 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 23:55:46 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:55:46 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:55:46 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:55:47 | INFO     | Gráficos generados exitosamente
2025-04-06 23:55:48 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 23:55:48 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 23:55:49 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 23:55:50 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 23:55:50 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 23:55:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 23:55:52 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 23:55:52 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 23:56:39 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:56:39 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:56:39 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:56:40 | INFO     | Gráficos generados exitosamente
2025-04-06 23:56:41 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 23:56:41 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 23:56:42 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 23:56:43 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 23:56:43 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 23:56:44 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 23:56:44 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 23:56:44 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-06 23:57:36 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:57:36 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:57:36 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:57:36 | ERROR    | Error generando gráficos: 
    Invalid value of type 'builtins.str' received for the 'colorscale' property of imshow
        Received value: 'GrBu'

    The 'colorscale' property is a colorscale and may be
    specified as:
      - A list of colors that will be spaced evenly to create the colorscale.
        Many predefined colorscale lists are included in the sequential, diverging,
        and cyclical modules in the plotly.colors package.
      - A list of 2-element lists where the first element is the
        normalized color level value (starting at 0 and ending at 1),
        and the second item is a valid color string.
        (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']])
      - One of the following named colorscales:
            ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',
             'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',
             'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',
             'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',
             'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',
             'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',
             'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',
             'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',
             'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',
             'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',
             'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',
             'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',
             'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
             'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
             'ylorrd'].
        Appending '_r' to a named colorscale reverses it.
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 217, in generar_graficas_interactivas
    fig4 = px.imshow(
           ^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_imshow.py", line 423, in imshow
    colorscale=colorscale_validator.validate_coerce(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 1673, in validate_coerce
    self.raise_invalid_val(v)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 299, in raise_invalid_val
    raise ValueError(
ValueError: 
    Invalid value of type 'builtins.str' received for the 'colorscale' property of imshow
        Received value: 'GrBu'

    The 'colorscale' property is a colorscale and may be
    specified as:
      - A list of colors that will be spaced evenly to create the colorscale.
        Many predefined colorscale lists are included in the sequential, diverging,
        and cyclical modules in the plotly.colors package.
      - A list of 2-element lists where the first element is the
        normalized color level value (starting at 0 and ending at 1),
        and the second item is a valid color string.
        (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']])
      - One of the following named colorscales:
            ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',
             'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',
             'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',
             'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',
             'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',
             'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',
             'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',
             'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',
             'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',
             'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',
             'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',
             'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',
             'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
             'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
             'ylorrd'].
        Appending '_r' to a named colorscale reverses it.

2025-04-06 23:57:36 | CRITICAL | Error no controlado: 
    Invalid value of type 'builtins.str' received for the 'colorscale' property of imshow
        Received value: 'GrBu'

    The 'colorscale' property is a colorscale and may be
    specified as:
      - A list of colors that will be spaced evenly to create the colorscale.
        Many predefined colorscale lists are included in the sequential, diverging,
        and cyclical modules in the plotly.colors package.
      - A list of 2-element lists where the first element is the
        normalized color level value (starting at 0 and ending at 1),
        and the second item is a valid color string.
        (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']])
      - One of the following named colorscales:
            ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',
             'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',
             'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',
             'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',
             'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',
             'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',
             'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',
             'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',
             'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',
             'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',
             'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',
             'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',
             'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
             'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
             'ylorrd'].
        Appending '_r' to a named colorscale reverses it.
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 443, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 217, in generar_graficas_interactivas
    fig4 = px.imshow(
           ^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_imshow.py", line 423, in imshow
    colorscale=colorscale_validator.validate_coerce(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 1673, in validate_coerce
    self.raise_invalid_val(v)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\_plotly_utils\basevalidators.py", line 299, in raise_invalid_val
    raise ValueError(
ValueError: 
    Invalid value of type 'builtins.str' received for the 'colorscale' property of imshow
        Received value: 'GrBu'

    The 'colorscale' property is a colorscale and may be
    specified as:
      - A list of colors that will be spaced evenly to create the colorscale.
        Many predefined colorscale lists are included in the sequential, diverging,
        and cyclical modules in the plotly.colors package.
      - A list of 2-element lists where the first element is the
        normalized color level value (starting at 0 and ending at 1),
        and the second item is a valid color string.
        (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']])
      - One of the following named colorscales:
            ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance',
             'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg',
             'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl',
             'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric',
             'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys',
             'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet',
             'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges',
             'orrd', 'oryel', 'oxy', 'peach', 'phase', 'picnic', 'pinkyl',
             'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn',
             'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu',
             'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar',
             'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn',
             'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid',
             'turbo', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr',
             'ylorrd'].
        Appending '_r' to a named colorscale reverses it.

2025-04-06 23:57:59 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-06 23:57:59 | INFO     | Cargando datos desde: datos.csv
2025-04-06 23:57:59 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-06 23:58:01 | INFO     | Gráficos generados exitosamente
2025-04-06 23:58:01 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-06 23:58:02 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-06 23:58:03 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-06 23:58:03 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-06 23:58:04 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-06 23:58:04 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-06 23:58:05 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-06 23:58:05 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:01:36 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:01:36 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:01:36 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:01:37 | INFO     | Gráficos generados exitosamente
2025-04-07 00:01:38 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:01:38 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:01:39 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:01:39 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:01:40 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:01:41 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:01:41 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:01:41 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:01:54 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:01:54 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:01:54 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:01:55 | INFO     | Gráficos generados exitosamente
2025-04-07 00:01:55 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:01:56 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:01:57 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:01:57 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:01:58 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:01:58 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:01:59 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:01:59 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:02:14 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:02:14 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:02:14 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:02:15 | INFO     | Gráficos generados exitosamente
2025-04-07 00:02:16 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:02:16 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:02:17 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:02:17 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:02:18 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:02:18 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:02:19 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:02:19 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:07:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:07:34 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:07:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:07:35 | INFO     | Gráficos generados exitosamente
2025-04-07 00:07:36 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:07:36 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:07:37 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:07:37 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:07:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:07:39 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:07:39 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:07:39 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:11:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:11:34 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:11:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:11:35 | INFO     | Gráficos generados exitosamente
2025-04-07 00:11:35 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:11:36 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:11:36 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:11:37 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:11:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:11:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:11:39 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:11:39 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:13:11 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:13:33 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:21:45 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:24:59 | INFO     | Gráficos generados exitosamente
2025-04-07 00:25:34 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:25:42 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:25:42 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:25:43 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:25:43 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:25:44 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:25:45 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:26:36 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:35:04 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:35:04 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:35:04 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:35:05 | INFO     | Gráficos generados exitosamente
2025-04-07 00:35:05 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:35:06 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:35:07 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:35:07 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:35:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:35:08 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:35:09 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:35:09 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:36:00 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:36:00 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:36:00 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:36:00 | ERROR    | Error generando gráficos: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_color
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 179, in generar_graficas_interactivas
    fig1.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_color
^^^^^
2025-04-07 00:36:00 | CRITICAL | Error no controlado: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_color
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 477, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 179, in generar_graficas_interactivas
    fig1.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_color
^^^^^
2025-04-07 00:36:39 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:36:39 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:36:39 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:36:40 | ERROR    | Error generando gráficos: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_coloraxis
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 179, in generar_graficas_interactivas
    fig1.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_coloraxis
^^^^^
2025-04-07 00:36:40 | CRITICAL | Error no controlado: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_coloraxis
^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 477, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 179, in generar_graficas_interactivas
    fig1.update_layout(
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 787, in update_layout
    return super(Figure, self).update_layout(dict1, overwrite, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1392, in update_layout
    self.layout.update(dict1, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Layout: 'yaxix'

Did you mean "yaxis"?

    Valid properties:
        activeselection
            :class:`plotly.graph_objects.layout.Activeselection`
            instance or dict with compatible properties
        activeshape
            :class:`plotly.graph_objects.layout.Activeshape`
            instance or dict with compatible properties
        annotations
            A tuple of
            :class:`plotly.graph_objects.layout.Annotation`
            instances or dicts with compatible properties
        annotationdefaults
            When used in a template (as
            layout.template.layout.annotationdefaults), sets the
            default property values to use for elements of
            layout.annotations
        autosize
            Determines whether or not a layout width or height that
            has been left undefined by the user is initialized on
            each relayout. Note that, regardless of this attribute,
            an undefined layout width or height is always
            initialized on the first call to plot.
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. This is the default
            value; however it could be overridden for individual
            axes.
        barcornerradius
            Sets the rounding of bar corners. May be an integer
            number of pixels, or a percentage of bar width (as a
            string ending in %).
        bargap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        bargroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        barmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "relative", the bars
            are stacked on top of one another, with negative values
            below the axis, positive values above With "group", the
            bars are plotted next to one another centered around
            the shared location. With "overlay", the bars are
            plotted over one another, you might need to reduce
            "opacity" to see multiple bars.
        barnorm
            Sets the normalization for bar traces on the graph.
            With "fraction", the value of each bar is divided by
            the sum of all values at that location coordinate.
            "percent" is the same but multiplied by 100 to show
            percentages.
        boxgap
            Sets the gap (in plot fraction) between boxes of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        boxgroupgap
            Sets the gap (in plot fraction) between boxes of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        boxmode
            Determines how boxes at the same location coordinate
            are displayed on the graph. If "group", the boxes are
            plotted next to one another centered around the shared
            location. If "overlay", the boxes are plotted over one
            another, you might need to set "opacity" to see them
            multiple boxes. Has no effect on traces that have
            "width" set.
        calendar
            Sets the default calendar system to use for
            interpreting and displaying dates throughout the plot.
        clickmode
            Determines the mode of single click interactions.
            "event" is the default value and emits the
            `plotly_click` event. In addition this mode emits the
            `plotly_selected` event in drag modes "lasso" and
            "select", but with no event data attached (kept for
            compatibility reasons). The "select" flag enables
            selecting single data points via click. This mode also
            supports persistent selections, meaning that pressing
            Shift while clicking, adds to / subtracts from an
            existing selection. "select" with `hovermode`: "x" can
            be confusing, consider explicitly setting `hovermode`:
            "closest" when using this feature. Selection events are
            sent accordingly as long as "event" flag is set as
            well. When the "event" flag is missing, `plotly_click`
            and `plotly_selected` events are not fired.
        coloraxis
            :class:`plotly.graph_objects.layout.Coloraxis` instance
            or dict with compatible properties
        colorscale
            :class:`plotly.graph_objects.layout.Colorscale`
            instance or dict with compatible properties
        colorway
            Sets the default trace colors.
        computed
            Placeholder for exporting automargin-impacting values
            namely `margin.t`, `margin.b`, `margin.l` and
            `margin.r` in "full-json" mode.
        datarevision
            If provided, a changed value tells `Plotly.react` that
            one or more data arrays has changed. This way you can
            modify arrays in-place rather than making a complete
            new copy for an incremental change. If NOT provided,
            `Plotly.react` assumes that data arrays are being
            treated as immutable, thus any data array with a
            different identity from its predecessor contains new
            data.
        dragmode
            Determines the mode of drag interactions. "select" and
            "lasso" apply only to scatter traces with markers or
            text. "orbit" and "turntable" apply only to 3D scenes.
        editrevision
            Controls persistence of user-driven changes in
            `editable: true` configuration, other than trace names
            and axis titles. Defaults to `layout.uirevision`.
        extendfunnelareacolors
            If `true`, the funnelarea slice colors (whether given
            by `funnelareacolorway` or inherited from `colorway`)
            will be extended to three times its original length by
            first repeating every color 20% lighter then each color
            20% darker. This is intended to reduce the likelihood
            of reusing the same color when you have many slices,
            but you can set `false` to disable. Colors provided in
            the trace, using `marker.colors`, are never extended.
        extendiciclecolors
            If `true`, the icicle slice colors (whether given by
            `iciclecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendpiecolors
            If `true`, the pie slice colors (whether given by
            `piecolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendsunburstcolors
            If `true`, the sunburst slice colors (whether given by
            `sunburstcolorway` or inherited from `colorway`) will
            be extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        extendtreemapcolors
            If `true`, the treemap slice colors (whether given by
            `treemapcolorway` or inherited from `colorway`) will be
            extended to three times its original length by first
            repeating every color 20% lighter then each color 20%
            darker. This is intended to reduce the likelihood of
            reusing the same color when you have many slices, but
            you can set `false` to disable. Colors provided in the
            trace, using `marker.colors`, are never extended.
        font
            Sets the global font. Note that fonts used in traces
            and other layout components inherit from the global
            font.
        funnelareacolorway
            Sets the default funnelarea slice colors. Defaults to
            the main `colorway` used for trace colors. If you
            specify a new list here it can still be extended with
            lighter and darker colors, see
            `extendfunnelareacolors`.
        funnelgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        funnelgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        funnelmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "stack", the bars are
            stacked on top of one another With "group", the bars
            are plotted next to one another centered around the
            shared location. With "overlay", the bars are plotted
            over one another, you might need to reduce "opacity" to
            see multiple bars.
        geo
            :class:`plotly.graph_objects.layout.Geo` instance or
            dict with compatible properties
        grid
            :class:`plotly.graph_objects.layout.Grid` instance or
            dict with compatible properties
        height
            Sets the plot's height (in px).
        hiddenlabels
            hiddenlabels is the funnelarea & pie chart analog of
            visible:'legendonly' but it can contain many labels,
            and can simultaneously hide slices from several
            pies/funnelarea charts
        hiddenlabelssrc
            Sets the source reference on Chart Studio Cloud for
            `hiddenlabels`.
        hidesources
            Determines whether or not a text link citing the data
            source is placed at the bottom-right cored of the
            figure. Has only an effect only on graphs that have
            been generated via forked graphs from the Chart Studio
            Cloud (at https://chart-studio.plotly.com or on-
            premise).
        hoverdistance
            Sets the default distance (in pixels) to look for data
            to add hover labels (-1 means no cutoff, 0 means no
            looking for data). This is only a real distance for
            hovering on point-like objects, like scatter points.
            For area-like objects (bars, scatter fills, etc)
            hovering is on inside the area and off outside, but
            these objects will not supersede hover on point-like
            objects in case of conflict.
        hoverlabel
            :class:`plotly.graph_objects.layout.Hoverlabel`
            instance or dict with compatible properties
        hovermode
            Determines the mode of hover interactions. If
            "closest", a single hoverlabel will appear for the
            "closest" point within the `hoverdistance`. If "x" (or
            "y"), multiple hoverlabels will appear for multiple
            points at the "closest" x- (or y-) coordinate within
            the `hoverdistance`, with the caveat that no more than
            one hoverlabel will appear per trace. If *x unified*
            (or *y unified*), a single hoverlabel will appear
            multiple points at the closest x- (or y-) coordinate
            within the `hoverdistance` with the caveat that no more
            than one hoverlabel will appear per trace. In this
            mode, spikelines are enabled by default perpendicular
            to the specified axis. If false, hover interactions are
            disabled.
        hoversubplots
            Determines expansion of hover effects to other subplots
            If "single" just the axis pair of the primary point is
            included without overlaying subplots. If "overlaying"
            all subplots using the main axis and occupying the same
            space are included. If "axis", also include stacked
            subplots using the same axis when `hovermode` is set to
            "x", *x unified*, "y" or *y unified*.
        iciclecolorway
            Sets the default icicle slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendiciclecolors`.
        images
            A tuple of :class:`plotly.graph_objects.layout.Image`
            instances or dicts with compatible properties
        imagedefaults
            When used in a template (as
            layout.template.layout.imagedefaults), sets the default
            property values to use for elements of layout.images
        legend
            :class:`plotly.graph_objects.layout.Legend` instance or
            dict with compatible properties
        map
            :class:`plotly.graph_objects.layout.Map` instance or
            dict with compatible properties
        mapbox
            :class:`plotly.graph_objects.layout.Mapbox` instance or
            dict with compatible properties
        margin
            :class:`plotly.graph_objects.layout.Margin` instance or
            dict with compatible properties
        meta
            Assigns extra meta information that can be used in
            various `text` attributes. Attributes such as the
            graph, axis and colorbar `title.text`, annotation
            `text` `trace.name` in legend items, `rangeselector`,
            `updatemenus` and `sliders` `label` text all support
            `meta`. One can access `meta` fields using template
            strings: `%{meta[i]}` where `i` is the index of the
            `meta` item in question. `meta` can also be an object
            for example `{key: value}` which can be accessed
            %{meta[key]}.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        minreducedheight
            Minimum height of the plot with margin.automargin
            applied (in px)
        minreducedwidth
            Minimum width of the plot with margin.automargin
            applied (in px)
        modebar
            :class:`plotly.graph_objects.layout.Modebar` instance
            or dict with compatible properties
        newselection
            :class:`plotly.graph_objects.layout.Newselection`
            instance or dict with compatible properties
        newshape
            :class:`plotly.graph_objects.layout.Newshape` instance
            or dict with compatible properties
        paper_bgcolor
            Sets the background color of the paper where the graph
            is drawn.
        piecolorway
            Sets the default pie slice colors. Defaults to the main
            `colorway` used for trace colors. If you specify a new
            list here it can still be extended with lighter and
            darker colors, see `extendpiecolors`.
        plot_bgcolor
            Sets the background color of the plotting area in-
            between x and y axes.
        polar
            :class:`plotly.graph_objects.layout.Polar` instance or
            dict with compatible properties
        scattergap
            Sets the gap (in plot fraction) between scatter points
            of adjacent location coordinates. Defaults to `bargap`.
        scattermode
            Determines how scatter points at the same location
            coordinate are displayed on the graph. With "group",
            the scatter points are plotted next to one another
            centered around the shared location. With "overlay",
            the scatter points are plotted over one another, you
            might need to reduce "opacity" to see multiple scatter
            points.
        scene
            :class:`plotly.graph_objects.layout.Scene` instance or
            dict with compatible properties
        selectdirection
            When `dragmode` is set to "select", this limits the
            selection of the drag to horizontal, vertical or
            diagonal. "h" only allows horizontal selection, "v"
            only vertical, "d" only diagonal and "any" sets no
            limit.
        selectionrevision
            Controls persistence of user-driven changes in selected
            points from all traces.
        selections
            A tuple of
            :class:`plotly.graph_objects.layout.Selection`
            instances or dicts with compatible properties
        selectiondefaults
            When used in a template (as
            layout.template.layout.selectiondefaults), sets the
            default property values to use for elements of
            layout.selections
        separators
            Sets the decimal and thousand separators. For example,
            *. * puts a '.' before decimals and a space between
            thousands. In English locales, dflt is ".," but other
            locales may alter this default.
        shapes
            A tuple of :class:`plotly.graph_objects.layout.Shape`
            instances or dicts with compatible properties
        shapedefaults
            When used in a template (as
            layout.template.layout.shapedefaults), sets the default
            property values to use for elements of layout.shapes
        showlegend
            Determines whether or not a legend is drawn. Default is
            `true` if there is a trace to show and any of these: a)
            Two or more traces would by default be shown in the
            legend. b) One pie trace is shown in the legend. c) One
            trace is explicitly given with `showlegend: true`.
        sliders
            A tuple of :class:`plotly.graph_objects.layout.Slider`
            instances or dicts with compatible properties
        sliderdefaults
            When used in a template (as
            layout.template.layout.sliderdefaults), sets the
            default property values to use for elements of
            layout.sliders
        smith
            :class:`plotly.graph_objects.layout.Smith` instance or
            dict with compatible properties
        spikedistance
            Sets the default distance (in pixels) to look for data
            to draw spikelines to (-1 means no cutoff, 0 means no
            looking for data). As with hoverdistance, distance does
            not apply to area-like objects. In addition, some
            objects can be hovered on but will not generate
            spikelines, such as scatter fills.
        sunburstcolorway
            Sets the default sunburst slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendsunburstcolors`.
        template
            Default attributes to be applied to the plot. This
            should be a dict with format: `{'layout':
            layoutTemplate, 'data': {trace_type: [traceTemplate,
            ...], ...}}` where `layoutTemplate` is a dict matching
            the structure of `figure.layout` and `traceTemplate` is
            a dict matching the structure of the trace with type
            `trace_type` (e.g. 'scatter'). Alternatively, this may
            be specified as an instance of
            plotly.graph_objs.layout.Template.  Trace templates are
            applied cyclically to traces of each type. Container
            arrays (eg `annotations`) have special handling: An
            object ending in `defaults` (eg `annotationdefaults`)
            is applied to each array item. But if an item has a
            `templateitemname` key we look in the template array
            for an item with matching `name` and apply that
            instead. If no matching `name` is found we mark the
            item invisible. Any named template item not referenced
            is appended to the end of the array, so this can be
            used to add a watermark annotation or a logo image, for
            example. To omit one of these items on the plot, make
            an item with matching `templateitemname` and `visible:
            false`.
        ternary
            :class:`plotly.graph_objects.layout.Ternary` instance
            or dict with compatible properties
        title
            :class:`plotly.graph_objects.layout.Title` instance or
            dict with compatible properties
        transition
            Sets transition options used during Plotly.react
            updates.
        treemapcolorway
            Sets the default treemap slice colors. Defaults to the
            main `colorway` used for trace colors. If you specify a
            new list here it can still be extended with lighter and
            darker colors, see `extendtreemapcolors`.
        uirevision
            Used to allow user interactions with the plot to
            persist after `Plotly.react` calls that are unaware of
            these interactions. If `uirevision` is omitted, or if
            it is given and it changed from the previous
            `Plotly.react` call, the exact new figure is used. If
            `uirevision` is truthy and did NOT change, any
            attribute that has been affected by user interactions
            and did not receive a different value in the new figure
            will keep the interaction value. `layout.uirevision`
            attribute serves as the default for `uirevision`
            attributes in various sub-containers. For finer control
            you can set these sub-attributes directly. For example,
            if your app separately controls the data on the x and y
            axes you might set `xaxis.uirevision=*time*` and
            `yaxis.uirevision=*cost*`. Then if only the y data is
            changed, you can update `yaxis.uirevision=*quantity*`
            and the y axis range will reset but the x axis range
            will retain any user-driven zoom.
        uniformtext
            :class:`plotly.graph_objects.layout.Uniformtext`
            instance or dict with compatible properties
        updatemenus
            A tuple of
            :class:`plotly.graph_objects.layout.Updatemenu`
            instances or dicts with compatible properties
        updatemenudefaults
            When used in a template (as
            layout.template.layout.updatemenudefaults), sets the
            default property values to use for elements of
            layout.updatemenus
        violingap
            Sets the gap (in plot fraction) between violins of
            adjacent location coordinates. Has no effect on traces
            that have "width" set.
        violingroupgap
            Sets the gap (in plot fraction) between violins of the
            same location coordinate. Has no effect on traces that
            have "width" set.
        violinmode
            Determines how violins at the same location coordinate
            are displayed on the graph. If "group", the violins are
            plotted next to one another centered around the shared
            location. If "overlay", the violins are plotted over
            one another, you might need to set "opacity" to see
            them multiple violins. Has no effect on traces that
            have "width" set.
        waterfallgap
            Sets the gap (in plot fraction) between bars of
            adjacent location coordinates.
        waterfallgroupgap
            Sets the gap (in plot fraction) between bars of the
            same location coordinate.
        waterfallmode
            Determines how bars at the same location coordinate are
            displayed on the graph. With "group", the bars are
            plotted next to one another centered around the shared
            location. With "overlay", the bars are plotted over one
            another, you might need to reduce "opacity" to see
            multiple bars.
        width
            Sets the plot's width (in px).
        xaxis
            :class:`plotly.graph_objects.layout.XAxis` instance or
            dict with compatible properties
        yaxis
            :class:`plotly.graph_objects.layout.YAxis` instance or
            dict with compatible properties
        
Did you mean "yaxis"?

Bad property path:
yaxix_coloraxis
^^^^^
2025-04-07 00:39:03 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:39:03 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:39:03 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:39:04 | INFO     | Gráficos generados exitosamente
2025-04-07 00:39:04 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:39:05 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:39:05 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:39:06 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:39:07 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:39:07 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:39:08 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:39:08 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:42:33 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:42:33 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:42:33 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:42:34 | INFO     | Gráficos generados exitosamente
2025-04-07 00:42:35 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:42:35 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:42:36 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:42:36 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:42:37 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:42:38 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:42:38 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:42:38 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:43:15 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:43:15 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:43:15 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:43:16 | INFO     | Gráficos generados exitosamente
2025-04-07 00:43:17 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:43:18 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:43:18 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:43:19 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:43:19 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:43:20 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:43:21 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:43:21 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:46:34 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:46:34 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:46:34 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:46:36 | ERROR    | Error generando gráficos: Invalid property specified for object of type plotly.graph_objs.Scattergl: 'trendline'

Did you mean "line"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        dx
            Sets the x coordinate step. See `x0` for more info.
        dy
            Sets the y coordinate step. See `y0` for more info.
        error_x
            :class:`plotly.graph_objects.scattergl.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scattergl.ErrorY` instance
            or dict with compatible properties
        fill
            Sets the area to fill with a solid color. Defaults to
            "none" unless this trace is stacked, then it gets
            "tonexty" ("tonextx") if `orientation` is "v" ("h") Use
            with `fillcolor` if not "none". "tozerox" and "tozeroy"
            fill to x=0 and y=0 respectively. "tonextx" and
            "tonexty" fill between the endpoints of this trace and
            the endpoints of the trace before it, connecting those
            endpoints with straight lines (to make a stacked area
            graph); if there is no trace before it, they behave
            like "tozerox" and "tozeroy". "toself" connects the
            endpoints of the trace (or each segment of the trace if
            it has gaps) into a closed shape. "tonext" fills the
            space between two traces if one completely encloses the
            other (eg consecutive contour lines), and behaves like
            "toself" if there is no trace before it. "tonext"
            should not be used if one trace does not enclose the
            other. Traces in a `stackgroup` will only fill to (or
            be filled to) other traces in the same group. With
            multiple `stackgroup`s or some traces stacked and some
            not, if fill-linked traces are not already consecutive,
            the later ones will be pushed down in the drawing
            order.
        fillcolor
            Sets the fill color. Defaults to a half-transparent
            variant of the line color, marker color, or marker line
            color, whichever is available.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scattergl.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each (x,y)
            pair. If a single string, the same string appears over
            all the data points. If an array of string, the items
            are mapped in order to the this trace's (x,y)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scattergl.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scattergl.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scattergl.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        selected
            :class:`plotly.graph_objects.scattergl.Selected`
            instance or dict with compatible properties
        selectedpoints
            Array containing integer indices of selected points.
            Has an effect only for traces that support selections.
            Note that an empty array means an empty selection where
            the `unselected` are turned on for all points, whereas,
            any other non-array values means no selection all where
            the `selected` and `unselected` styles have no effect.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scattergl.Stream` instance
            or dict with compatible properties
        text
            Sets text elements associated with each (x,y) pair. If
            a single string, the same string appears over all the
            data points. If an array of string, the items are
            mapped in order to the this trace's (x,y) coordinates.
            If trace `hoverinfo` contains a "text" flag and
            "hovertext" is not set, these elements will be seen in
            the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        unselected
            :class:`plotly.graph_objects.scattergl.Unselected`
            instance or dict with compatible properties
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        x0
            Alternate to `x`. Builds a linear space of x
            coordinates. Use with `dx` where `x0` is the starting
            coordinate and `dx` the step.
        xaxis
            Sets a reference between this trace's x coordinates and
            a 2D cartesian x axis. If "x" (the default value), the
            x coordinates refer to `layout.xaxis`. If "x2", the x
            coordinates refer to `layout.xaxis2`, and so on.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the x
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        xperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the x0 axis. When `x0period` is round number
            of weeks, the `x0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        xperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the x axis.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        y0
            Alternate to `y`. Builds a linear space of y
            coordinates. Use with `dy` where `y0` is the starting
            coordinate and `dy` the step.
        yaxis
            Sets a reference between this trace's y coordinates and
            a 2D cartesian y axis. If "y" (the default value), the
            y coordinates refer to `layout.yaxis`. If "y2", the y
            coordinates refer to `layout.yaxis2`, and so on.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        yperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the y
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        yperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the y0 axis. When `y0period` is round number
            of weeks, the `y0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        yperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the y axis.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        
Did you mean "line"?

Bad property path:
trendline_color_override
^^^^^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 274, in generar_graficas_interactivas
    fig5a.update_traces(trendline_color_override='red')  # Cambiar color de la línea de tendencia a rojo
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 757, in update_traces
    return super(Figure, self).update_traces(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1365, in update_traces
    trace.update(patch, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Scattergl: 'trendline'

Did you mean "line"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        dx
            Sets the x coordinate step. See `x0` for more info.
        dy
            Sets the y coordinate step. See `y0` for more info.
        error_x
            :class:`plotly.graph_objects.scattergl.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scattergl.ErrorY` instance
            or dict with compatible properties
        fill
            Sets the area to fill with a solid color. Defaults to
            "none" unless this trace is stacked, then it gets
            "tonexty" ("tonextx") if `orientation` is "v" ("h") Use
            with `fillcolor` if not "none". "tozerox" and "tozeroy"
            fill to x=0 and y=0 respectively. "tonextx" and
            "tonexty" fill between the endpoints of this trace and
            the endpoints of the trace before it, connecting those
            endpoints with straight lines (to make a stacked area
            graph); if there is no trace before it, they behave
            like "tozerox" and "tozeroy". "toself" connects the
            endpoints of the trace (or each segment of the trace if
            it has gaps) into a closed shape. "tonext" fills the
            space between two traces if one completely encloses the
            other (eg consecutive contour lines), and behaves like
            "toself" if there is no trace before it. "tonext"
            should not be used if one trace does not enclose the
            other. Traces in a `stackgroup` will only fill to (or
            be filled to) other traces in the same group. With
            multiple `stackgroup`s or some traces stacked and some
            not, if fill-linked traces are not already consecutive,
            the later ones will be pushed down in the drawing
            order.
        fillcolor
            Sets the fill color. Defaults to a half-transparent
            variant of the line color, marker color, or marker line
            color, whichever is available.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scattergl.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each (x,y)
            pair. If a single string, the same string appears over
            all the data points. If an array of string, the items
            are mapped in order to the this trace's (x,y)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scattergl.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scattergl.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scattergl.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        selected
            :class:`plotly.graph_objects.scattergl.Selected`
            instance or dict with compatible properties
        selectedpoints
            Array containing integer indices of selected points.
            Has an effect only for traces that support selections.
            Note that an empty array means an empty selection where
            the `unselected` are turned on for all points, whereas,
            any other non-array values means no selection all where
            the `selected` and `unselected` styles have no effect.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scattergl.Stream` instance
            or dict with compatible properties
        text
            Sets text elements associated with each (x,y) pair. If
            a single string, the same string appears over all the
            data points. If an array of string, the items are
            mapped in order to the this trace's (x,y) coordinates.
            If trace `hoverinfo` contains a "text" flag and
            "hovertext" is not set, these elements will be seen in
            the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        unselected
            :class:`plotly.graph_objects.scattergl.Unselected`
            instance or dict with compatible properties
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        x0
            Alternate to `x`. Builds a linear space of x
            coordinates. Use with `dx` where `x0` is the starting
            coordinate and `dx` the step.
        xaxis
            Sets a reference between this trace's x coordinates and
            a 2D cartesian x axis. If "x" (the default value), the
            x coordinates refer to `layout.xaxis`. If "x2", the x
            coordinates refer to `layout.xaxis2`, and so on.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the x
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        xperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the x0 axis. When `x0period` is round number
            of weeks, the `x0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        xperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the x axis.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        y0
            Alternate to `y`. Builds a linear space of y
            coordinates. Use with `dy` where `y0` is the starting
            coordinate and `dy` the step.
        yaxis
            Sets a reference between this trace's y coordinates and
            a 2D cartesian y axis. If "y" (the default value), the
            y coordinates refer to `layout.yaxis`. If "y2", the y
            coordinates refer to `layout.yaxis2`, and so on.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        yperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the y
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        yperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the y0 axis. When `y0period` is round number
            of weeks, the `y0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        yperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the y axis.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        
Did you mean "line"?

Bad property path:
trendline_color_override
^^^^^^^^^
2025-04-07 00:46:36 | CRITICAL | Error no controlado: Invalid property specified for object of type plotly.graph_objs.Scattergl: 'trendline'

Did you mean "line"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        dx
            Sets the x coordinate step. See `x0` for more info.
        dy
            Sets the y coordinate step. See `y0` for more info.
        error_x
            :class:`plotly.graph_objects.scattergl.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scattergl.ErrorY` instance
            or dict with compatible properties
        fill
            Sets the area to fill with a solid color. Defaults to
            "none" unless this trace is stacked, then it gets
            "tonexty" ("tonextx") if `orientation` is "v" ("h") Use
            with `fillcolor` if not "none". "tozerox" and "tozeroy"
            fill to x=0 and y=0 respectively. "tonextx" and
            "tonexty" fill between the endpoints of this trace and
            the endpoints of the trace before it, connecting those
            endpoints with straight lines (to make a stacked area
            graph); if there is no trace before it, they behave
            like "tozerox" and "tozeroy". "toself" connects the
            endpoints of the trace (or each segment of the trace if
            it has gaps) into a closed shape. "tonext" fills the
            space between two traces if one completely encloses the
            other (eg consecutive contour lines), and behaves like
            "toself" if there is no trace before it. "tonext"
            should not be used if one trace does not enclose the
            other. Traces in a `stackgroup` will only fill to (or
            be filled to) other traces in the same group. With
            multiple `stackgroup`s or some traces stacked and some
            not, if fill-linked traces are not already consecutive,
            the later ones will be pushed down in the drawing
            order.
        fillcolor
            Sets the fill color. Defaults to a half-transparent
            variant of the line color, marker color, or marker line
            color, whichever is available.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scattergl.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each (x,y)
            pair. If a single string, the same string appears over
            all the data points. If an array of string, the items
            are mapped in order to the this trace's (x,y)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scattergl.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scattergl.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scattergl.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        selected
            :class:`plotly.graph_objects.scattergl.Selected`
            instance or dict with compatible properties
        selectedpoints
            Array containing integer indices of selected points.
            Has an effect only for traces that support selections.
            Note that an empty array means an empty selection where
            the `unselected` are turned on for all points, whereas,
            any other non-array values means no selection all where
            the `selected` and `unselected` styles have no effect.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scattergl.Stream` instance
            or dict with compatible properties
        text
            Sets text elements associated with each (x,y) pair. If
            a single string, the same string appears over all the
            data points. If an array of string, the items are
            mapped in order to the this trace's (x,y) coordinates.
            If trace `hoverinfo` contains a "text" flag and
            "hovertext" is not set, these elements will be seen in
            the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        unselected
            :class:`plotly.graph_objects.scattergl.Unselected`
            instance or dict with compatible properties
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        x0
            Alternate to `x`. Builds a linear space of x
            coordinates. Use with `dx` where `x0` is the starting
            coordinate and `dx` the step.
        xaxis
            Sets a reference between this trace's x coordinates and
            a 2D cartesian x axis. If "x" (the default value), the
            x coordinates refer to `layout.xaxis`. If "x2", the x
            coordinates refer to `layout.xaxis2`, and so on.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the x
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        xperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the x0 axis. When `x0period` is round number
            of weeks, the `x0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        xperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the x axis.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        y0
            Alternate to `y`. Builds a linear space of y
            coordinates. Use with `dy` where `y0` is the starting
            coordinate and `dy` the step.
        yaxis
            Sets a reference between this trace's y coordinates and
            a 2D cartesian y axis. If "y" (the default value), the
            y coordinates refer to `layout.yaxis`. If "y2", the y
            coordinates refer to `layout.yaxis2`, and so on.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        yperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the y
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        yperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the y0 axis. When `y0period` is round number
            of weeks, the `y0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        yperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the y axis.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        
Did you mean "line"?

Bad property path:
trendline_color_override
^^^^^^^^^
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 481, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 274, in generar_graficas_interactivas
    fig5a.update_traces(trendline_color_override='red')  # Cambiar color de la línea de tendencia a rojo
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\graph_objs\_figure.py", line 757, in update_traces
    return super(Figure, self).update_traces(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 1365, in update_traces
    trace.update(patch, overwrite=overwrite, **kwargs)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 5123, in update
    BaseFigure._perform_update(self, kwargs, overwrite=overwrite)
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\basedatatypes.py", line 3882, in _perform_update
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Scattergl: 'trendline'

Did you mean "line"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        dx
            Sets the x coordinate step. See `x0` for more info.
        dy
            Sets the y coordinate step. See `y0` for more info.
        error_x
            :class:`plotly.graph_objects.scattergl.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scattergl.ErrorY` instance
            or dict with compatible properties
        fill
            Sets the area to fill with a solid color. Defaults to
            "none" unless this trace is stacked, then it gets
            "tonexty" ("tonextx") if `orientation` is "v" ("h") Use
            with `fillcolor` if not "none". "tozerox" and "tozeroy"
            fill to x=0 and y=0 respectively. "tonextx" and
            "tonexty" fill between the endpoints of this trace and
            the endpoints of the trace before it, connecting those
            endpoints with straight lines (to make a stacked area
            graph); if there is no trace before it, they behave
            like "tozerox" and "tozeroy". "toself" connects the
            endpoints of the trace (or each segment of the trace if
            it has gaps) into a closed shape. "tonext" fills the
            space between two traces if one completely encloses the
            other (eg consecutive contour lines), and behaves like
            "toself" if there is no trace before it. "tonext"
            should not be used if one trace does not enclose the
            other. Traces in a `stackgroup` will only fill to (or
            be filled to) other traces in the same group. With
            multiple `stackgroup`s or some traces stacked and some
            not, if fill-linked traces are not already consecutive,
            the later ones will be pushed down in the drawing
            order.
        fillcolor
            Sets the fill color. Defaults to a half-transparent
            variant of the line color, marker color, or marker line
            color, whichever is available.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scattergl.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets hover text elements associated with each (x,y)
            pair. If a single string, the same string appears over
            all the data points. If an array of string, the items
            are mapped in order to the this trace's (x,y)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scattergl.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scattergl.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scattergl.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace.
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        selected
            :class:`plotly.graph_objects.scattergl.Selected`
            instance or dict with compatible properties
        selectedpoints
            Array containing integer indices of selected points.
            Has an effect only for traces that support selections.
            Note that an empty array means an empty selection where
            the `unselected` are turned on for all points, whereas,
            any other non-array values means no selection all where
            the `selected` and `unselected` styles have no effect.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scattergl.Stream` instance
            or dict with compatible properties
        text
            Sets text elements associated with each (x,y) pair. If
            a single string, the same string appears over all the
            data points. If an array of string, the items are
            mapped in order to the this trace's (x,y) coordinates.
            If trace `hoverinfo` contains a "text" flag and
            "hovertext" is not set, these elements will be seen in
            the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        unselected
            :class:`plotly.graph_objects.scattergl.Unselected`
            instance or dict with compatible properties
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        x0
            Alternate to `x`. Builds a linear space of x
            coordinates. Use with `dx` where `x0` is the starting
            coordinate and `dx` the step.
        xaxis
            Sets a reference between this trace's x coordinates and
            a 2D cartesian x axis. If "x" (the default value), the
            x coordinates refer to `layout.xaxis`. If "x2", the x
            coordinates refer to `layout.xaxis2`, and so on.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the x
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        xperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the x0 axis. When `x0period` is round number
            of weeks, the `x0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        xperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the x axis.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        y0
            Alternate to `y`. Builds a linear space of y
            coordinates. Use with `dy` where `y0` is the starting
            coordinate and `dy` the step.
        yaxis
            Sets a reference between this trace's y coordinates and
            a 2D cartesian y axis. If "y" (the default value), the
            y coordinates refer to `layout.yaxis`. If "y2", the y
            coordinates refer to `layout.yaxis2`, and so on.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        yperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the y
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        yperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the y0 axis. When `y0period` is round number
            of weeks, the `y0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        yperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the y axis.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        
Did you mean "line"?

Bad property path:
trendline_color_override
^^^^^^^^^
2025-04-07 00:49:36 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:49:36 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:49:36 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:49:36 | ERROR    | Error generando gráficos: cannot access local variable 'px' where it is not associated with a value
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 168, in generar_graficas_interactivas
    trace_altitude = px.line(df, x='Index', y='Altitude').data[0]
                     ^^
UnboundLocalError: cannot access local variable 'px' where it is not associated with a value
2025-04-07 00:49:36 | CRITICAL | Error no controlado: cannot access local variable 'px' where it is not associated with a value
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 498, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 168, in generar_graficas_interactivas
    trace_altitude = px.line(df, x='Index', y='Altitude').data[0]
                     ^^
UnboundLocalError: cannot access local variable 'px' where it is not associated with a value
2025-04-07 00:50:46 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:50:46 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:50:46 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:50:47 | INFO     | Gráficos generados exitosamente
2025-04-07 00:50:48 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:50:48 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:50:49 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:50:49 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:50:50 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:50:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:50:51 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:50:51 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:52:19 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:52:19 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:52:19 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:52:20 | ERROR    | Error generando gráficos: 'str' object has no attribute 'keys'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 274, in generar_graficas_interactivas
    fig5c = px.scatter(df, x='Temperature', y='Pressure', trendline='ols', trendline_color_override='red', title="Temperatura vs Presión", trendline_options='lowess')
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 35, in ols
    for k in trendline_options.keys():
             ^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'keys'
2025-04-07 00:52:20 | CRITICAL | Error no controlado: 'str' object has no attribute 'keys'
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 478, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\prueba.py", line 274, in generar_graficas_interactivas
    fig5c = px.scatter(df, x='Temperature', y='Pressure', trendline='ols', trendline_color_override='red', title="Temperatura vs Presión", trendline_options='lowess')
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 2670, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Carlos\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\plotly\express\trendline_functions\__init__.py", line 35, in ols
    for k in trendline_options.keys():
             ^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'str' object has no attribute 'keys'
2025-04-07 00:52:42 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:52:42 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:52:42 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:52:43 | INFO     | Gráficos generados exitosamente
2025-04-07 00:52:44 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:52:44 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:52:45 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:52:45 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:52:47 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:52:47 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:52:48 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:52:48 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 00:54:13 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 00:54:13 | INFO     | Cargando datos desde: datos.csv
2025-04-07 00:54:13 | INFO     | Datos cargados correctamente. Muestras: 1297
2025-04-07 00:54:14 | INFO     | Gráficos generados exitosamente
2025-04-07 00:54:15 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 00:54:15 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 00:54:16 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 00:54:16 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 00:54:17 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 00:54:18 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 00:54:18 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 00:54:18 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 18:46:43 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 18:46:43 | ERROR    | Error cargando datos: Archivo no encontrado: datos.csv
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_html.py", line 95, in cargar_datos
    raise FileNotFoundError(f"Archivo no encontrado: {file_path}")
FileNotFoundError: Archivo no encontrado: datos.csv
2025-04-07 18:46:43 | ERROR    | Error crítico: Archivo no encontrado: datos.csv
2025-04-07 18:48:18 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 18:48:18 | INFO     | Cargando datos desde: datos.txt
2025-04-07 18:48:18 | WARNING  | Formato de tiempo no válido, usando valores crudos
2025-04-07 18:48:18 | INFO     | Datos cargados correctamente. Muestras: 3793
2025-04-07 18:48:29 | INFO     | Gráficos generados exitosamente
2025-04-07 18:48:30 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 18:48:31 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 18:48:31 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 18:48:32 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 18:48:33 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 18:48:33 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 18:48:34 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 18:48:34 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 18:51:00 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 18:51:00 | INFO     | Cargando datos desde: datos.txt
2025-04-07 18:51:00 | INFO     | Datos cargados correctamente. Muestras: 336
2025-04-07 18:51:02 | INFO     | Gráficos generados exitosamente
2025-04-07 18:51:03 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 18:51:03 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 18:51:04 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 18:51:04 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 18:51:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 18:51:06 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 18:51:06 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 18:51:06 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-07 21:36:30 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-07 21:36:30 | INFO     | Cargando datos desde: datos.txt
2025-04-07 21:36:30 | INFO     | Datos cargados correctamente. Muestras: 336
2025-04-07 21:36:31 | INFO     | Gráficos generados exitosamente
2025-04-07 21:36:32 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-07 21:36:32 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-07 21:36:33 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-07 21:36:33 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-07 21:36:34 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-07 21:36:35 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-07 21:36:35 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-07 21:36:35 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-08 01:05:11 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-08 01:05:11 | INFO     | Cargando datos desde: datos.txt
2025-04-08 01:05:11 | INFO     | Datos cargados correctamente. Muestras: 336
2025-04-08 01:05:14 | ERROR    | Error generando gráficos: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\JADA CanSat Team\Documents\Visual Studio\Programas-tratamiento-CanSat\programa_gráficas_html.py", line 273, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure', trendline='ols', trendline_color_override='red', title="Altitud vs Presión", trendline_scope='overall')
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_core.py", line 2773, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-08 01:05:14 | CRITICAL | Error no controlado: No module named 'statsmodels'
Traceback (most recent call last):
  File "c:\Users\JADA CanSat Team\Documents\Visual Studio\Programas-tratamiento-CanSat\programa_gráficas_html.py", line 478, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\JADA CanSat Team\Documents\Visual Studio\Programas-tratamiento-CanSat\programa_gráficas_html.py", line 273, in generar_graficas_interactivas
    fig5a = px.scatter(df, x='Altitude', y='Pressure', trendline='ols', trendline_color_override='red', title="Altitud vs Presión", trendline_scope='overall')
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_chart_types.py", line 69, in scatter
    return make_figure(args=locals(), constructor=go.Scatter)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_core.py", line 2773, in make_figure
    patch, fit_results = make_trace_kwargs(
                         ^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\_core.py", line 430, in make_trace_kwargs
    y_out, hover_header, fit_results = trendline_function(
                                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JADA CanSat Team\AppData\Roaming\Python\Python311\site-packages\plotly\express\trendline_functions\__init__.py", line 42, in ols
    import statsmodels.api as sm
ModuleNotFoundError: No module named 'statsmodels'
2025-04-08 01:08:07 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-08 01:08:07 | INFO     | Cargando datos desde: datos.txt
2025-04-08 01:08:07 | INFO     | Datos cargados correctamente. Muestras: 336
2025-04-08 01:08:21 | INFO     | Gráficos generados exitosamente
2025-04-08 01:08:24 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-08 01:08:26 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-08 01:08:27 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-08 01:08:29 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-08 01:08:30 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-08 01:08:32 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-08 01:08:33 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-08 01:08:33 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-09 01:21:15 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:21:15 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:21:15 | INFO     | Datos cargados correctamente. Muestras: 3011
2025-04-09 01:21:28 | INFO     | Gráficos generados exitosamente
2025-04-09 01:21:29 | INFO     | Gráfico guardado: graficos/altitud_presion_receptor.html
2025-04-09 01:21:29 | INFO     | Gráfico guardado: graficos/trayectoria_3d_receptor.html
2025-04-09 01:21:30 | INFO     | Gráfico guardado: graficos/panel_sensores_receptor.html
2025-04-09 01:21:30 | INFO     | Gráfico guardado: graficos/matriz_correlacion_receptor.html
2025-04-09 01:21:31 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_receptor.html
2025-04-09 01:21:32 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_receptor.html
2025-04-09 01:21:32 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_receptor.html
2025-04-09 01:21:33 | INFO     | Gráfico guardado: graficos/temperatura_tiempo_receptor.html
2025-04-09 01:21:33 | INFO     | ==== PROCESO COMPLETADO (DATOS RECEPTOR) ====
2025-04-09 01:27:02 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:27:02 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:27:02 | INFO     | Datos cargados correctamente. Muestras: 3011
2025-04-09 01:32:20 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:32:20 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:32:20 | INFO     | Datos cargados correctamente. Muestras: 387
2025-04-09 01:32:22 | INFO     | Gráficos generados exitosamente
2025-04-09 01:32:22 | INFO     | Gráfico guardado: graficos/altitud_presion_receptor.html
2025-04-09 01:32:23 | INFO     | Gráfico guardado: graficos/trayectoria_3d_receptor.html
2025-04-09 01:32:24 | INFO     | Gráfico guardado: graficos/panel_sensores_receptor.html
2025-04-09 01:32:24 | INFO     | Gráfico guardado: graficos/matriz_correlacion_receptor.html
2025-04-09 01:32:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_receptor.html
2025-04-09 01:32:25 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_receptor.html
2025-04-09 01:32:26 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_receptor.html
2025-04-09 01:32:27 | INFO     | Gráfico guardado: graficos/temperatura_tiempo_receptor.html
2025-04-09 01:32:27 | INFO     | ==== PROCESO COMPLETADO (DATOS RECEPTOR) ====
2025-04-09 01:34:46 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-09 01:34:46 | INFO     | Cargando datos desde: datos_emisor.csv
2025-04-09 01:34:46 | INFO     | Datos cargados correctamente. Muestras: 3011
2025-04-09 01:34:48 | INFO     | Gráficos generados exitosamente
2025-04-09 01:34:48 | INFO     | Gráfico guardado: graficos/altitud_presion.html
2025-04-09 01:34:49 | INFO     | Gráfico guardado: graficos/trayectoria_3d.html
2025-04-09 01:34:50 | INFO     | Gráfico guardado: graficos/panel_sensores.html
2025-04-09 01:34:50 | INFO     | Gráfico guardado: graficos/matriz_correlacion.html
2025-04-09 01:34:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion.html
2025-04-09 01:34:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp.html
2025-04-09 01:34:52 | INFO     | Gráfico guardado: graficos/scatter_temp_presion.html
2025-04-09 01:34:52 | INFO     | ==== PROCESO COMPLETADO ====
2025-04-09 01:34:54 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:34:54 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:34:54 | INFO     | Datos cargados correctamente. Muestras: 387
2025-04-09 01:34:55 | INFO     | Gráficos generados exitosamente
2025-04-09 01:34:56 | INFO     | Gráfico guardado: graficos/altitud_presion_receptor.html
2025-04-09 01:34:57 | INFO     | Gráfico guardado: graficos/trayectoria_3d_receptor.html
2025-04-09 01:34:57 | INFO     | Gráfico guardado: graficos/panel_sensores_receptor.html
2025-04-09 01:34:58 | INFO     | Gráfico guardado: graficos/matriz_correlacion_receptor.html
2025-04-09 01:34:58 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_receptor.html
2025-04-09 01:34:59 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_receptor.html
2025-04-09 01:35:00 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_receptor.html
2025-04-09 01:35:00 | INFO     | Gráfico guardado: graficos/temperatura_tiempo_receptor.html
2025-04-09 01:35:00 | INFO     | ==== PROCESO COMPLETADO (DATOS RECEPTOR) ====
2025-04-09 01:40:12 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:40:12 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:40:12 | INFO     | Datos cargados correctamente. Muestras: 387
2025-04-09 01:40:12 | ERROR    | Error generando gráficos: name 'np' is not defined
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_SD_receptor.py", line 239, in generar_graficas_interactivas
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
           ^^
NameError: name 'np' is not defined
2025-04-09 01:40:12 | CRITICAL | Error no controlado: name 'np' is not defined
Traceback (most recent call last):
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_SD_receptor.py", line 480, in main
    figuras = generar_graficas_interactivas(df)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Carlos\Documents\GitHub\Programas tratamiento CanSat\programa_gráficas_SD_receptor.py", line 239, in generar_graficas_interactivas
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
           ^^
NameError: name 'np' is not defined
2025-04-09 01:40:46 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:40:46 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:40:46 | INFO     | Datos cargados correctamente. Muestras: 387
2025-04-09 01:40:47 | INFO     | Gráficos generados exitosamente
2025-04-09 01:40:48 | INFO     | Gráfico guardado: graficos/altitud_presion_receptor.html
2025-04-09 01:40:48 | INFO     | Gráfico guardado: graficos/trayectoria_3d_receptor.html
2025-04-09 01:40:49 | INFO     | Gráfico guardado: graficos/panel_sensores_receptor.html
2025-04-09 01:40:49 | INFO     | Gráfico guardado: graficos/matriz_correlacion_receptor.html
2025-04-09 01:40:50 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_receptor.html
2025-04-09 01:40:51 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_receptor.html
2025-04-09 01:40:51 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_receptor.html
2025-04-09 01:40:52 | INFO     | Gráfico guardado: graficos/temperatura_tiempo_receptor.html
2025-04-09 01:40:52 | INFO     | ==== PROCESO COMPLETADO (DATOS RECEPTOR) ====
2025-04-09 01:42:11 | INFO     | ==== INICIO DEL PROCESO (DATOS RECEPTOR) ====
2025-04-09 01:42:11 | INFO     | Cargando datos desde: datos_receptor.csv
2025-04-09 01:42:11 | INFO     | Datos cargados correctamente. Muestras: 387
2025-04-09 01:42:12 | INFO     | Gráficos generados exitosamente
2025-04-09 01:42:13 | INFO     | Gráfico guardado: graficos/altitud_presion_receptor.html
2025-04-09 01:42:14 | INFO     | Gráfico guardado: graficos/trayectoria_3d_receptor.html
2025-04-09 01:42:14 | INFO     | Gráfico guardado: graficos/panel_sensores_receptor.html
2025-04-09 01:42:15 | INFO     | Gráfico guardado: graficos/matriz_correlacion_receptor.html
2025-04-09 01:42:15 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_receptor.html
2025-04-09 01:42:16 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_receptor.html
2025-04-09 01:42:17 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_receptor.html
2025-04-09 01:42:17 | INFO     | Gráfico guardado: graficos/temperatura_tiempo_receptor.html
2025-04-09 01:42:17 | INFO     | ==== PROCESO COMPLETADO (DATOS RECEPTOR) ====
2025-04-09 01:44:00 | INFO     | ==== INICIO DEL PROCESO ====
2025-04-09 01:44:00 | INFO     | Cargando datos desde: datos_emisor.csv
2025-04-09 01:44:00 | INFO     | Datos cargados correctamente. Muestras: 3011
2025-04-09 01:44:02 | INFO     | Gráficos generados exitosamente
2025-04-09 01:44:02 | INFO     | Gráfico guardado: graficos/altitud_presion_emisor.html
2025-04-09 01:44:03 | INFO     | Gráfico guardado: graficos/trayectoria_3d_emisor.html
2025-04-09 01:44:03 | INFO     | Gráfico guardado: graficos/panel_sensores_emisor.html
2025-04-09 01:44:04 | INFO     | Gráfico guardado: graficos/matriz_correlacion_emisor.html
2025-04-09 01:44:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_presion_emisor.html
2025-04-09 01:44:05 | INFO     | Gráfico guardado: graficos/scatter_altitud_temp_emisor.html
2025-04-09 01:44:06 | INFO     | Gráfico guardado: graficos/scatter_temp_presion_emisor.html
2025-04-09 01:44:06 | INFO     | ==== PROCESO COMPLETADO ====
